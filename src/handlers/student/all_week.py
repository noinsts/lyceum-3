from collections import defaultdict
from enum import Enum
from dataclasses import dataclass

from aiogram import F
from aiogram.types import Message
from aiogram.enums import ParseMode

from ..base import BaseHandler
from src.utils import JSONLoader
from src.db.connector import DBConnector

WEEKDAYS = ('–ü–û–ù–ï–î–Ü–õ–û–ö', '–í–Ü–í–¢–û–†–û–ö', '–°–ï–†–ï–î–ê', '–ß–ï–¢–í–ï–†', "–ü'–Ø–¢–ù–ò–¶–Ø")


class Triggers(str, Enum):
    HANDLER = "üìù –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤–µ—Å—å —Ç–∏–∂–¥–µ–Ω—å"


@dataclass(frozen=True)
class Messages:
    NO_FORM = (
        "–í–∞—à–æ–≥–æ –∫–ª–∞—Å—É –Ω–µ–º–∞—î –≤ –ë–î. –ë—É–¥—å-–ª–∞—Å–∫–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—É, "
        "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /register"
    )

    NO_RESULT = (
        "–£ –≤–∞—Å –Ω–µ–º–∞—î —É—Ä–æ–∫—ñ–≤.–î–∏–≤–Ω–æ, –ø—Ä–∞–≤–¥–∞?)"
    )


class AllWeekHandler(BaseHandler):
    def register_handler(self):
        self.router.message.register(
            self.all_week,
            F.text == Triggers.HANDLER
        )

    async def all_week(self, message: Message, db: DBConnector) -> None:
        """
        –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –≤–µ—Å—å —Ç–∏–∂–¥–µ–Ω—å
        """
        user_form = await db.register.get_form(message.from_user.id)

        if not user_form:
            await message.answer(Messages.NO_FORM)
            return

        sheet = await self.get_sheet()
        results = await sheet.student.get_lessons(user_form)

        if not results:
            await message.answer(Messages.NO_RESULT)
            return

        # —Å–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–Ω—è—Ö
        lessons_by_day = defaultdict(list)
        for day, number, subject, teacher in results:
            lessons_by_day[day].append((number, subject, teacher))

        prompt = f"<b>–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫—ñ–≤ {user_form} –∫–ª–∞—Å—É</b>\n"

        # –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –∑ –æ—Ä—É–¥–Ω–∏–º–∏ –≤—ñ–¥–º—ñ–Ω–∫–∞–º–∏
        instrumental_names = JSONLoader("settings/instrumental_teacher_names.json")

        for day in WEEKDAYS:
            if day not in lessons_by_day:
                continue

            prompt += f"\n<b>{day.capitalize()}</b>\n"
            for number, subject, teacher in sorted(lessons_by_day[day]):
                teacher_names = [
                    instrumental_names.get(t.strip(), t.strip())
                    for t in teacher.split(',')
                ]

                teacher_string = " —Ç–∞ ".join(teacher_names)
                prompt += f"<b>{number}</b>: {subject} –∑ {teacher_string}\n"

        await message.answer(prompt, parse_mode=ParseMode.HTML)
