from enum import Enum

from aiogram import F
from aiogram.types import Message
from aiogram.enums import ParseMode
from pytz import timezone

from ..base import BaseHandler
from src.utils import JSONLoader
from src.sheets.connector import Sheet
from src.db.connector import DBConnector


class GenerateMessage:
    NO_FORM = (
        r"–°—å–æ–≥–æ–¥–Ω—ñ —Ö–º–∞—Ä–Ω–æ\.\.\. ‚òÅÔ∏è –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ 0\_0 ||–∞–±–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–Ω—å—Ç–µ —É—á–Ω–µ–º||"
    )

    WEEKEND = {
        'message': "–í–∏—Ö—ñ–¥–Ω–∏–π! Have a rest",
        'sticker': "CAACAgEAAxkBAAEOZSxoE3COqmuPY034826sWOvB7WgTQgACjgEAAnY3dj9180psDptQBzYE"
    }

    NO_RESULTS = (
        "–£—Ä–æ–∫—ñ–≤ –Ω–µ–º–∞—î, –≤–µ–∑–µ"
    )

    async def send(self, message: Message, form: str, sheet: Sheet, offset: int = 0) -> None:

        """
        –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –¥–Ω–µ–º

        Args:
            message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
            form (str): –ö–ª–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "11-–ë".
            sheet (Sheet): Google Sheet –æ–±'—î–∫—Ç, –∑ —è–∫–æ–≥–æ –±–µ—Ä–µ—Ç—å—Å—è —Ä–æ–∑–∫–ª–∞–¥
            offset (int): –ó–º—ñ—â–µ–Ω–Ω—è –¥–Ω—è —Ç–∏–∂–Ω—è, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É.
                0 ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ,
                1 ‚Äî –∑–∞–≤—Ç—Ä–∞,
                2 ‚Äî –ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞ —ñ —Ç.–¥.
        """

        if not form:
            await message.answer(self.NO_FORM, parse_mode=ParseMode.MARKDOWN_V2)
            return

        # tz = timezone("Europe/Kyiv")
        # day_num: int = (message.date.astimezone(tz).weekday() + offset) % 7

        day_num = 0

        if day_num > 4:
            await message.answer(self.WEEKEND['message'])
            await message.answer_sticker(self.WEEKEND['sticker'])
            return
        
        day_name = JSONLoader("settings/ukranian_weekname.json").get(str(day_num))

        results = await sheet.student.get_lessons(form, day_name)

        if not results:
            await message.answer(self.NO_RESULTS)
            return
        
        prompt = f"<b>–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ –Ω–∞ {day_name.lower()}</b>:\n\n"

        for lesson_id, name, teacher in results:
            prompt += f"<b>{lesson_id}</b>: <b>{name}</b> –∑ {teacher.replace(',', ' —Ç–∞')}\n\n"

        await message.answer(prompt, parse_mode=ParseMode.HTML)


class Triggers(str, Enum):
    TODAY_HANDLER = "üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
    TOMORROW_HANDLER = "üåá –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"


class LessonsTodayHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(self.today, F.text == Triggers.TODAY_HANDLER)

    async def today(self, message: Message, db: DBConnector) -> None:
        user_class = await db.register.get_form(message.from_user.id)
        sheet = await self.get_sheet()
        await GenerateMessage().send(message, user_class, sheet, offset=0)


class LessonsTomorrowHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(self.tomorrow, F.text == Triggers.TOMORROW_HANDLER)

    async def tomorrow(self, message: Message, db: DBConnector) -> None:
        user_class = await db.register.get_form(message.from_user.id)
        sheet = await self.get_sheet()
        await GenerateMessage().send(message, user_class, sheet, offset=1)
