from enum import Enum
from dataclasses import dataclass

from aiogram import F
from aiogram.types import Message
from aiogram.enums import ParseMode

from ..base import BaseHandler
from src.db.connector import DBConnector
from src.parsers.frontend import parse_day_name


class Triggers(str, Enum):
    TODAY_HANDLER = "üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
    TOMORROW_HANDLER = "üåá –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"


@dataclass(frozen=True)
class Messages:
    NO_FORM = (
        "‚ùå –°—Ö–æ–∂–µ, —â–æ –≤–∞—Å –Ω–µ–º–∞—î –≤ –Ω–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. "
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–Ω–æ–≤—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /register"
    )

    WEEKEND = {
        'message': "–†–æ–∑–∫–ª–∞–¥—É –Ω–µ –±—É–¥–µ, –±–æ –≤–∏—Ö—ñ–¥–Ω–∏–π!",
        'sticker': "CAACAgEAAxkBAAEOZSxoE3COqmuPY034826sWOvB7WgTQgACjgEAAnY3dj9180psDptQBzYE"
    }

    # 'message': (
    #     "<b>–†–æ–∑–∫–ª–∞–¥</b>:\n\n"
    #     "1. –ë–∞—Ä–∏—à—ñ–≤—Å—å–∫–∏–π —Ç—É—Ä–Ω—ñ—Ä –ø–æ \"Dota 2\"\n"
    #     "2. –õ–µ–∫—Ü—ñ—è –∑ —Ñ—ñ–∑–∏–∫–∏\n"
    #     "3. –ì–∞–π–¥ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –ø–æ–º—ñ–¥–æ—Ä—ñ–≤\n"
    #     "4. –ú–∞–π—Å—Ç–µ—Ä-–∫–ª–∞—Å –ø–æ –≤–∏–∫–ª–∏–∫–∞–Ω–Ω—é –∫–æ—Ç–∞-–º–æ–Ω–æ–±–∞–Ω–∫–∞ (–Ω–∞–ø—Ä—è–º–æ–∫: —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è)\n"
    #     "5. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –º—ñ–π —ñ–Ω—Å—Ç: <code>noinsts1</code> –ø–∂–ø–∂–ø–∂\n\n"
    #     "ps: —è–∫—â–æ —Ç–∞–∫ —Å–∏–ª—å–Ω–æ —Ö–æ—á–µ—Ç–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ä–æ–∑–∫–ª–∞–¥, —Ç–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é \"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\""
    # )

    NO_RESULTS = (
        "–°—å–æ–≥–æ–¥–Ω—ñ –±–µ–∑ —É—Ä–æ–∫—ñ–≤. –Ø–∫—â–æ –±—É–¥—É—Ç—å –∑–º—ñ–Ω–∏ ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª—é"
    )


class LessonsByDaysHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(
            self.handler,
            F.text.in_({Triggers.TODAY_HANDLER.value, Triggers.TOMORROW_HANDLER.value})
        )

    async def handler(self, message: Message, db: DBConnector) -> None:
        is_tomorrow = message.text == Triggers.TOMORROW_HANDLER.value
        offset = 1 if is_tomorrow else 0

        form = await db.register.get_form(message.from_user.id)

        if not form:
            await message.answer(Messages.NO_FORM, parse_mode=ParseMode.HTML)
            return

        day_name = parse_day_name(offset)

        if not day_name:
            await message.answer(Messages.WEEKEND['message'])
            await message.answer_sticker(Messages.WEEKEND['sticker'])
            return

        sheet = await self.get_sheet()
        results = await sheet.student.get_lessons(form, day_name)

        if not results:
            await message.answer(Messages.NO_RESULTS)
            return

        day_word = "–∑–∞–≤—Ç—Ä–∞" if is_tomorrow else "—Å—å–æ–≥–æ–¥–Ω—ñ"
        lessons_list = [
            f"<b>{lesson_id}</b>: <b>{name}</b> –∑ {teacher.replace(',', ' —Ç–∞')}"
            for lesson_id, name, teacher in results
        ]
        prompt = f"<b>–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ –Ω–∞ {day_word}</b>\n\n" + "\n".join(lessons_list)

        await message.answer(prompt, parse_mode=ParseMode.HTML)
