from aiogram import F
from aiogram.types import Message
from aiogram.enums import ParseMode

from ..base import BaseHandler
from src.utils import JSONLoader
from src.sheets.connector import Sheet
from src.db.connector import DBConnector


class GenerateMessage:
    @staticmethod
    async def send(message: Message, form: str, offset: int = 0, tz = None, wf = None) -> None:

        """
        –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–∑–∫–ª–∞–¥—É —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–Ω–µ–º

        Args:
            message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
            form (str): –ö–ª–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "11-–ë".
            offset (int): –ó–º—ñ—â–µ–Ω–Ω—è –¥–Ω—è —Ç–∏–∂–Ω—è, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É.
                0 ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ,
                1 ‚Äî –∑–∞–≤—Ç—Ä–∞,
                2 ‚Äî –ø—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞ —ñ —Ç.–¥.
            tz (tzinfo): –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–Ω—è —Ç–∏–∂–Ω—è.
            wf: –û–±'—î–∫—Ç –∞–±–æ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞–∑–≤ —É—Ä–æ–∫—ñ–≤ —Ç–∞ –≤—á–∏—Ç–µ–ª—ñ–≤.

        """

        if not form:
            await message.answer(
                r"–°—å–æ–≥–æ–¥–Ω—ñ —Ö–º–∞—Ä–Ω–æ\.\.\. ‚òÅÔ∏è –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ 0\_0 ||–∞–±–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–Ω—å—Ç–µ —É—á–Ω–µ–º||",
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        
        day_num: int = (message.date.astimezone(tz).weekday() + offset) % 7

        if day_num > 4:
            await message.answer("–í–∏—Ö—ñ–¥–Ω–∏–π! Have a rest")
            await message.answer_sticker("CAACAgEAAxkBAAEOZSxoE3COqmuPY034826sWOvB7WgTQgACjgEAAnY3dj9180psDptQBzYE")
            return
        
        day_name = JSONLoader("settings/ukranian_weekname.json").get(str(day_num))
        results = Sheet().student.get_lessons(form, day_name)

        if not results:
            await message.answer("–£ –≤–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π")
            return
        
        prompt = f"<b>–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ –Ω–∞ {day_name.lower()}</b>:\n\n"

        for lesson_id, name, teacher in results:
            # –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∏ —É—Ä–æ–∫—É —Ç–∞ –≤—á–∏—Ç–µ–ª—è –∑–∞ —á–∏—Å–µ–ª—å–Ω–∏–∫–æ–º / –∑–Ω–∞–º–µ–Ω–Ω–∏–∫–æ–º —Ç–∏–∂–Ω—è
            name, teacher = wf.student(name, teacher)
            if name:
                prompt += f"<b>{lesson_id}</b>: <b>{name}</b> –∑ {teacher.replace(',', ' —Ç–∞')}\n\n"

        await message.answer(
            prompt,
            parse_mode=ParseMode.HTML
        )
        

class LessonsTodayHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(self.today, F.text == 'üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')

    async def today(self, message: Message, db: DBConnector) -> None:
        user_class = await db.register.get_form(message.from_user.id)
        await GenerateMessage.send(message, user_class, offset=0, tz=self.kyiv_tz, wf=self.wf)


class LessonsTomorrowHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(self.tomorrow, F.text == 'üåá –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')

    async def tomorrow(self, message: Message, db: DBConnector) -> None:
        user_class = await db.register.get_form(message.from_user.id)
        await GenerateMessage.send(message, user_class, offset=1, tz=self.kyiv_tz, wf=self.wf)
