from aiogram import F
from aiogram.enums import ParseMode
from aiogram.types import Message

from db.connector import DBConnector
from ..base import BaseHandler


class OlympHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(
            self.handler,
            F.text == 'ü§ì –û–ª—ñ–º–ø—ñ–∞–¥–∏'
        )

    @staticmethod
    async def handler(message: Message, db: DBConnector) -> None:
        form = await db.register.get_form(message.from_user.id)

        if not form:
            await message.answer(
                "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /register"
            )
            return

        student_name = await db.register.get_student_name(message.from_user.id)

        if not student_name:
            await message.answer(
                "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ –≤ –±–∞–∑—ñ.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /register"
            )
            return

        olympiads = await db.olymp.my_olymps(student_name, form)

        if not olympiads:
            await message.answer("üéâ –í–∞–º –ø–æ—â–∞—Å—Ç–∏–ª–æ! –í–∞—Å —â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –Ω—ñ –Ω–∞ –∂–æ–¥–Ω—É –æ–ª—ñ–º–ø—ñ–∞–¥—É.")
            return

        for olymp in olympiads:
            prompt = (
                f"<b>üèÖ –û–ª—ñ–º–ø—ñ–∞–¥–∞ –∑ {olymp.subject}</b>\n"
                f"üë©‚Äçüè´ –í—á–∏—Ç–µ–ª—å: <i>{olymp.teacher_name}</i>\n"
                f"üìç –ï—Ç–∞–ø: <i>{olymp.stage_olymp}</i>\n"
                f"üìÖ –î–∞—Ç–∞: <i>{olymp.date.strftime('%d.%m.%Y')}</i>\n"
                f"{f'üìù –ü—Ä–∏–º—ñ—Ç–∫–∞: <i>{olymp.note}</i>' if olymp.note else ''}"
            )

            await message.answer(prompt, parse_mode=ParseMode.HTML)
