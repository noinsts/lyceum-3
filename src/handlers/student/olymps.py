from typing import Optional

from aiogram import F
from aiogram.enums import ParseMode
from aiogram.types import Message

from ..base import BaseHandler
from db.connector import DBConnector
from src.exceptions import ValidationError


class Triggers:
    HANDLER = "ü§ì –û–ª—ñ–º–ø—ñ–∞–¥–∏"


class Messages:
    NO_OLYMPIAD = (
        "üéâ –í–∞–º –ø–æ—â–∞—Å—Ç–∏–ª–æ! –í–∞—Å —â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –Ω—ñ –Ω–∞ –∂–æ–¥–Ω—É –æ–ª—ñ–º–ø—ñ–∞–¥—É."
    )

    OLYMPIAD = (
        "<b>üèÖ –û–ª—ñ–º–ø—ñ–∞–¥–∞ –∑ {subject}</b>\n"
        "üë©‚Äçüè´ –í—á–∏—Ç–µ–ª—å: <i>{teacher_name}</i>\n"
        "üìç –ï—Ç–∞–ø: <i>{stage_olymp}</i>\n"
        "üìÖ –î–∞—Ç–∞: <i>{date}</i>\n"
        "üìù –ü—Ä–∏–º—ñ—Ç–∫–∞: <i>{note}</i>"
    )

    VALIDATION_ERRORS = {
        "no_student_name": "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ –≤ –±–∞–∑—ñ.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /register",
        "no_form": "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ.\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /register"
    }


class OlympHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(
            self.handler,
            F.text == Triggers.HANDLER
        )

    async def handler(self, message: Message, db: DBConnector) -> None:
        form = await db.register.get_form(message.from_user.id)
        student_name = await db.register.get_student_name(message.from_user.id)

        try:
            self._validate(student_name, form)
        except ValidationError as e:
            await message.answer(str(e))
            return

        olympiads = await db.olymp.my_olymps(student_name, form)

        if not olympiads:
            await message.answer(Messages.NO_OLYMPIAD)
            return

        for olymp in olympiads:
            prompt = Messages.OLYMPIAD.format(
                subject=olymp.subject,
                teacher_name=olymp.teacher_name,
                stage_olymp=olymp.stage_olymp,
                date=olymp.date.strftime('%d.%m.%Y'),
                note=olymp.note or '(–í—ñ–¥—Å—É—Ç–Ω—è)'
            )

            await message.answer(prompt, parse_mode=ParseMode.HTML)

    @staticmethod
    def _validate(student_name: Optional[str], form: Optional[str]) -> bool:
        """
        –ú–µ—Ç–æ–¥ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó

        Args:
            student_name (str): —ñ–º'—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            form (str): –Ω–∞–∑–≤–∞ –∫–ª–∞—Å—É

        Returns:
            bool: —á–∏ –ø—Ä–æ–π—à–ª–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è

        Raises:
            ValidationError: —è–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
        """
        if not student_name:
            raise ValidationError(Messages.VALIDATION_ERRORS["no_student_name"])

        if not form:
            raise ValidationError(Messages.VALIDATION_ERRORS["no_form"])

        return True
