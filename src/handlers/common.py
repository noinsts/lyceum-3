from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode

from .base import BaseHandler
from src.keyboards.reply import HubMenu, HubTeacher
from src.keyboards.inline import HubAdmin, DeveloperHub
from .register import RegisterHandler
from settings.admins import Admins
from settings.developers import Developers


class CommonHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(self.start_cmd, CommandStart())

    async def start_cmd(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ start"""
        user_id = message.from_user.id

        admins = Admins().ADMINS
        developers = Developers().DEVELOPERS

        if user_id in developers:
            await message.answer(
                "The developer mode has been activated. üöÄ",
                reply_markup=DeveloperHub().get_keyboard()
            )

        if self.db.register.checker(user_id):
            # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            user_type = self.db.register.get_type(user_id)

            match user_type:
                case 'student':
                    form = self.db.register.get_class(user_id)
                    prompt = (
                        f"üëãüèª –í—ñ—Ç–∞—î–º–æ –≤ —á–∞—Ç-–±–æ—Ç—ñ <b>–ë–µ—Ä–µ–∑–∞–Ω—Å—å–∫–æ–≥–æ –ª—ñ—Ü–µ—é ‚Ññ3</b>\n\n"
                        f"–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ —É—á–µ–Ω—å <b>{form}</b> –∫–ª–∞—Å—É.\n\n"
                        f"–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register"
                    )
                    rm = HubMenu().get_keyboard()
                case "teacher":
                    teacher_name = self.db.register.get_teacher_name(user_id)
                    prompt = (
                        f"üëãüèª –í—ñ—Ç–∞—î–º–æ –≤ —á–∞—Ç-–±–æ—Ç—ñ <b>–ë–µ—Ä–µ–∑–∞–Ω—Å—å–∫–æ–≥–æ –ª—ñ—Ü–µ—é ‚Ññ3</b>\n\n"
                        f"–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤—á–∏—Ç–µ–ª—å <b>{teacher_name}</b>\n\n"
                        f"–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register"
                    )
                    rm = HubTeacher().get_keyboard()
                case _:
                    prompt = (
                        "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: —Ç–∏–ø –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ.\n"
                        "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–Ω–æ–≤–æ (/register)"
                    )
                    rm = None

            await message.answer(prompt, reply_markup=rm, parse_mode=ParseMode.HTML)

            if user_id in admins:
                await message.answer(
                    "üëë –ü–∞–Ω–µ–ª—å –∞–Ω–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤—ñ–∫–º–Ω–µ–Ω–∞.",
                    reply_markup=HubAdmin().get_keyboard()
                )

        else:
            # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            await message.answer(
                "üëãüèª –í—ñ—Ç–∞—î–º–æ –≤ —á–∞—Ç-–±–æ—Ç—ñ <b>–ë–µ—Ä–µ–∑–∞–Ω—Å—å–∫–æ–≥–æ –ª—ñ—Ü–µ—é ‚Ññ3</b>\n\n"
                "–ë—É–¥—å-–ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è, —â–æ–± —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –≤—Å—ñ–º–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞\n\n"
                "‚öôÔ∏è Telegram-–∫–∞–Ω–∞–ª –±–æ—Ç–∞: –ø–æ–∫–∏ —â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π (—Å–∫–æ—Ä–æ –±—É–¥–µ)",
                # TODO: –¥–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–≥–∫ –±–æ—Ç–∞, –∫–æ–ª–∏ –±—É–¥–µ
                parse_mode=ParseMode.HTML
            )
            await RegisterHandler().start_register(message, state)
