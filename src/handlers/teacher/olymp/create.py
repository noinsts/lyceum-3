import re
from typing import List
from datetime import datetime

from aiogram import F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

from ...base import BaseHandler
from src.utils import parse_hub_keyboard
from src.utils.states import CreateOlympStates
from src.keyboards.reply import SkipButton, OlympStages
from src.keyboards.inline import SubmitKeyboard
from src.responses import TeacherVerify


class CreateHandler(BaseHandler):
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    DATE_PATTERN = r'^\d{2}-\d{2}-\d{4}$'
    SKIP_BUTTON_TEXT = "üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"

    def register_handler(self) -> None:
        self.router.callback_query.register(
            self.handler,
            F.data == 'create_new_olymp'
        )

        self.router.message.register(
            self.subject,
            CreateOlympStates.waiting_for_subject
        )

        self.router.message.register(
            self.form,
            CreateOlympStates.waiting_for_form
        )

        self.router.message.register(
            self.student_name,
            CreateOlympStates.waiting_for_student_name
        )

        self.router.message.register(
            self.olymp_stage,
            CreateOlympStates.waiting_for_olymp_stage
        )

        self.router.message.register(
            self.date,
            CreateOlympStates.waiting_for_date
        )

        self.router.message.register(
            self.note,
            CreateOlympStates.waiting_for_note
        )

        self.router.message.register(
            self.confirm,
            CreateOlympStates.confirm_creating
        )

        self.router.callback_query.register(
            self.submit,
            F.data == 'olymp_submit',
            CreateOlympStates.confirm_creating
        )

        self.router.callback_query.register(
            self.cancel,
            F.data == 'olymp_cancel',
            CreateOlympStates.confirm_creating
        )

    def is_verif(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –≤—á–∏—Ç–µ–ª—å"""
        teacher_name = self.db.register.get_teacher_name(user_id)
        return self.db.register.teacher_is_verif(user_id, teacher_name)

    async def handler(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ª—ñ–º–ø—ñ–∞–¥–∏"""
        await callback.answer("")

        if self.is_verif(callback.from_user.id):
            await self._start_olympiad_creation(callback, state)
        else:
            await TeacherVerify.send_msg(callback)

    @staticmethod
    async def _start_olympiad_creation(callback: CallbackQuery, state: FSMContext) -> None:
        """–†–æ–∑–ø–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ª—ñ–º–ø—ñ–∞–¥–∏"""
        await state.set_state(CreateOlympStates.waiting_for_subject)
        await callback.message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ, <b>–ø–æ–∫–∏ —Ü–µ –Ω–µ –ø—Ä–∞—Ü—é—î, —Ç–æ–∂ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ</b>",
            parse_mode=ParseMode.HTML
        )

    async def subject(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–ª—é—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        if not self._validate_subject(message.text):
            await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç–∞")
            return

        await state.update_data(subject=message.text.strip())
        await state.set_state(CreateOlympStates.waiting_for_form)

        await message.answer(
            "–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ, <b>–ø–æ–∫–∏ —Ü–µ –Ω–µ –ø—Ä–∞—Ü—é—î, —Ç–æ–∂ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ</b>",
            parse_mode=ParseMode.HTML
        )

    async def form(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–ª—é—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–ª–∞—Å—É"""
        if not self._validate_form(message.text):
            await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–ª–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10-–ê)")
            return

        # TODO: –∑—Ä–æ–±–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —á–µ—Ä–µ–∑ gsheet –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —è–∫—ñ –∫–ª–∞–≤–∏ —î —É –≤—á–∏—Ç–µ–ª—è
        await state.update_data(form=message.text)
        await state.set_state(CreateOlympStates.waiting_for_student_name)

        await message.answer(
            "–ó–∞–º—î—á–∞—Ç—î–ª—å–Ω–æ! –ó–∞–ø–∏—à—ñ—Ç—å –ü–Ü –≤—Å—ñ—Ö —É—á–Ω—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É.\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: \"–†–∏–±–∞–ª–∫–∞ –ü–æ–ª—ñ–Ω–∞, –®–æ—Å—Ç–∞–∫ –ê–Ω–¥—Ä—ñ–π, –ú–∏–∫–∏—Ç–µ–Ω–∫–æ –ê—Ä—Å–µ–Ω, –õ–µ–ø—Å—å–∫–∏–π –ê—Ä—Ç–µ–º\""
        )

    async def student_name(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–ª—é—î –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω —É—á–Ω—ñ–≤"""
        students = self._parse_student_names(message.text)

        if not students:
            await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º–µ–Ω–∞ —É—á–Ω—ñ–≤ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ")
            return

        await state.update_data(student_name=message.text)
        await state.set_state(CreateOlympStates.waiting_for_olymp_stage)

        await message.answer(
            f"–î–æ–¥–∞–Ω–æ {len(students)} —É—á–Ω—ñ–≤. –û–±–µ—Ä—ñ—Ç—å –Ω–∏–∂—á–µ –µ—Ç–∞–ø –æ–ª—ñ–º–ø—ñ–∞–¥–∏",
            reply_markup=OlympStages().get_keyboard()
        )

    @staticmethod
    async def olymp_stage(message: Message, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–ª—é—î –≤–∏–±—ñ—Ä –µ—Ç–∞–ø—É –æ–ª—ñ–º–ø—ñ–∞–¥–∏"""
        await state.update_data(olymp_stage=message.text)
        await state.set_state(CreateOlympStates.waiting_for_date)

        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–ª—ñ–º–ø—ñ–∞–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ \"–î–î-–ú–ú-–†–†–†–†\" (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20-05-2025)",
            reply_markup=ReplyKeyboardRemove()
        )

    async def date(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–ª—é—î –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏"""
        if not self._validate_date(message.text):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20-05-2025)"
            )
            return

        await state.update_data(date=message.text)
        await state.set_state(CreateOlympStates.waiting_for_note)

        await message.answer(
            "–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä, —è–∫–∏–π –±—É–¥–µ –≤–∏–¥–Ω–æ –≤—Å—ñ–º —É—á–Ω—è–º, —è–∫–∏—Ö –≤–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞ –æ–ª—ñ–º–ø—ñ–∞–¥—É, "
            "—è–∫—â–æ –Ω–µ —Ö–æ—á–µ—Ç–µ –Ω—ñ—á–æ–≥–æ –¥–æ–¥–∞–≤–∞—Ç–∏, —Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ",
            reply_markup=SkipButton().get_keyboard()
        )

    async def note(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–ª—é—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–∫–∏"""
        note = None if message.text == self.SKIP_BUTTON_TEXT else message.text.strip()

        await state.update_data(note=note)
        await state.set_state(CreateOlympStates.confirm_creating)
        await self.confirm(message, state)

    async def confirm(self, message: Message, state: FSMContext) -> None:
        """–ü–æ–∫–∞–∑—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        data = await state.get_data()

        text = self._format_confirmation_text(data)

        await message.answer(
            text,
            reply_markup=SubmitKeyboard().get_keyboard(
                submit_cb="olymp_submit", cancel_cb="olymp_cancel"
            ),
            parse_mode=ParseMode.HTML
        )

    async def submit(self, callback: CallbackQuery, state: FSMContext) -> None:
        await callback.answer("")

        try:
            data = await state.get_data()
            await self._create_olympiad(callback.from_user.id, data)

            await callback.message.answer(
                "‚úÖ –û–ª—ñ–º–ø—ñ–∞–¥—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.",
                reply_markup=parse_hub_keyboard(callback.from_user.id)
            )

        except Exception as e:
            await callback.message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–ª—ñ–º–ø—ñ–∞–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
            )
            self.log.error(f"Error creating olympiad: {e}")
        finally:
            await state.clear()

    @staticmethod
    async def cancel(callback: CallbackQuery, state: FSMContext) -> None:
        """–°–∫–∞—Å–æ–≤—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω –æ–ª—ñ–º–ø—ñ–∞–¥–∏"""
        await callback.answer("")
        await state.set_state(CreateOlympStates.waiting_for_subject)
        await callback.message.answer("–î–æ–±—Ä–µ, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç —â–µ —Ä–∞–∑")

    # –ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥—É

    @staticmethod
    def _validate_subject(subject: str) -> bool:
        """–í–∞–ª—ñ–¥—É—î –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç–∞"""
        return bool(subject and subject.strip() and len(subject.strip()) >= 2)

    @staticmethod
    def _validate_form(form: str) -> bool:
        """–í–∞–ª—ñ–¥—É—î –∫–ª–∞—Å"""
        return bool(form and form.strip() and len(form.strip()) >= 2)
        # FIXME: –∑–∞–º—ñ–Ω–∏—Ç–∏ –º–µ—Ç–æ–¥–æ–º –∑ register.py

    @staticmethod
    def _parse_student_names(names_str: str) -> List[str]:
        if not names_str:
            return []

        names = [name.strip() for name in names_str.split(',')]
        return [name for name in names if name and len(name) >= 2]

    def _validate_date(self, date_str: str) -> bool:
        if not re.match(self.DATE_PATTERN, date_str):
            return False

        try:
            day, month, year = map(int, date_str.split('-'))
            datetime(year, month, day)
            return True
        except ValueError:
            return False

    @staticmethod
    def _format_confirmation_text(data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
        return (
            f"üìã <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö:</b>\n\n"
            f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {data.get('subject')}\n"
            f"üè´ <b>–ö–ª–∞—Å:</b> {data.get('form')}\n"
            f"üë• <b>–£—á–∞—Å–Ω–∏–∫–∏:</b> {data.get('student_name')}\n"
            f"üèÜ <b>–ï—Ç–∞–ø –æ–ª—ñ–º–ø—ñ–∞–¥–∏:</b> {data.get('olymp_stage')}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {data.get('date')}\n"
            f"üìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> {data.get('note') or '‚Äî'}\n\n"
            f"<i>–≤—Å–µ –≤—ñ—Ä–Ω–æ?</i>"
        )

    async def _create_olympiad(self, user_id: int, data: dict) -> None:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ª—ñ–º–ø—ñ–∞–¥–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
        form = data.get("form")
        student_names = data.get("student_name").split(", ")
        teacher_name = self.db.register.get_teacher_name(user_id)
        subject = data.get("subject")
        stage_olymp = data.get("olymp_stage")
        date = data.get("date")
        note = data.get("note")

        for student in student_names:
            self.db.olymp.add_member(form, student, teacher_name, subject, stage_olymp, date, note)
