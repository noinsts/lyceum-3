from enum import Enum
from dataclasses import dataclass

from aiogram import F
from aiogram.types import Message
from aiogram.enums import ParseMode

from ..base import BaseHandler
from src.db.connector import DBConnector
from src.parsers.frontend import parse_day_name


class Triggers(str, Enum):
    TODAY = "üìÖ –ö–ª–∞—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
    TOMORROW = "üåÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"


@dataclass(frozen=True)
class Messages:
    NO_TEACHER_NAME = (
        "‚ö†Ô∏è <b>–í–∏–±–∞—á—Ç–µ, –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –±—É–¥—å-–ª–∞—Å–∫–∞, "
        "—Å–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä–µ—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /register</b>"
    )

    WEEKEND = "–í–∏—Ö—ñ–¥–Ω–∏–π! –ß–æ–º—É –≤–∏ –¥—É–º–∞—î—Ç–µ –ø—Ä–æ —Ä–æ–±–æ—Ç—É?"

    NO_RESULTS = (
        "–°—Ö–æ–∂–µ, —É –≤–∞—Å —Ü—å–æ–≥–æ –¥–Ω—è –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫—É. "
        "–í—ñ—Ç–∞—é, –≤–∏ –∞–±–æ –≤ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ, –∞–±–æ –¥—É–∂–µ —â–∞—Å–ª–∏–≤–∏–π –≤–∏–∫–ª–∞–¥–∞—á üòé"
    )

    STICKER = "CAACAgIAAxkBAAEOZ1doFUn9Y0TR-qURiQeEb7HZdGC2qQACOjMAAlG5gEjH0Q7wxWFwrDYE"

    DEV_BADGE = "\n<i>–ó–Ω–∞–π—à–ª–∏ –Ω–µ—Ç–æ—á–Ω—ñ—Å—Ç—å? –ë—É–¥—å-–ª–∞—Å–∫–∞ –ø–æ–≤—ñ–¥–æ–º—Ç–µ @noinsts</i>"


class LessonsByDaysHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(
            self.handler,
            F.text.in_({Triggers.TODAY.value, Triggers.TOMORROW.value})
        )

    async def handler(self, message: Message, db: DBConnector) -> None:
        is_tomorrow = message.text == Triggers.TOMORROW.value
        offset = 1 if is_tomorrow else 0

        teacher_name = await db.register.get_teacher_name(message.from_user.id)

        if not teacher_name:
            await message.answer(Messages.NO_TEACHER_NAME, parse_mode=ParseMode.HTML)
            return

        day_name = parse_day_name(offset)

        if not day_name:
            await message.answer(Messages.WEEKEND)
            await message.answer_sticker(Messages.STICKER)
            return

        sheet = await self.get_sheet()
        results = await sheet.teacher.get_lessons(teacher_name, day_name)

        if not results:
            await message.answer(Messages.NO_RESULTS)
            await message.answer_sticker(Messages.STICKER)
            return

        day_word = "–∑–∞–≤—Ç—Ä–∞" if is_tomorrow else "—Å—å–æ–≥–æ–¥–Ω—ñ"
        lessons_list = [f"<b>{lesson_id}</b>: {subject} –∑ {form}" for lesson_id, subject, form in results]
        prompt = f'<b>–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—ñ–≤ –Ω–∞ {day_word}</b>\n\n' + "\n".join(lessons_list) + Messages.DEV_BADGE

        # TODO: dev badge
        prompt += Messages.DEV_BADGE

        await message.answer(prompt, parse_mode=ParseMode.HTML)
