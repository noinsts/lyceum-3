from aiogram import F
from aiogram.types import Message
from aiogram.enums import ParseMode

from ..base import BaseHandler
from src.utils import JSONLoader
from src.sheets.connector import Sheet
from src.db.connector import DBConnector


class GenerateMessage:
    @staticmethod
    async def send(message: Message, tn: str, offset: int = 0, tz = None) -> None:

        if not tn:
            # –æ–±—Ä–æ–±–ª—é—î–º–æ —Å–∏—Ç—É–∞—Ü—ñ—é, –∫–æ–ª–∏ –≤—á–∏—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            await message.answer(
                "‚ö†Ô∏è <b>–í–∏–±–∞—á—Ç–µ, –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –±—É–¥—å-–ª–∞—Å–∫–∞, "
                "—Å–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä–µ—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /register</b>",
                parse_mode=ParseMode.HTML
            )
            return

        day_num: int = (message.date.astimezone(tz).weekday() + offset) % 7

        if day_num > 4:
            # –æ–±—Ä–æ–±–ª—é—î–º–æ —Å–∏—Ç—É–∞—Ü—ñ—é, —è–∫—â–æ –≤–∏—Ö—ñ–¥–Ω–∏–π
            await message.answer("–í–∏—Ö—ñ–¥–Ω–∏–π! –ß–æ–º—É –≤–∏ –¥—É–º–∞—î—Ç–µ –ø—Ä–æ —Ä–æ–±–æ—Ç—É?")
            await message.answer_sticker("CAACAgIAAxkBAAEOZ1doFUn9Y0TR-qURiQeEb7HZdGC2qQACOjMAAlG5gEjH0Q7wxWFwrDYE")
            return
        
        day_name: str = JSONLoader("settings/ukranian_weekname.json").get(str(day_num))

        results = Sheet().teacher.get_lessons(tn, day_name)

        if not results:
            # –æ–±—Ä–æ–±–ª—é—î–º–æ —Å–∏—Ç—É–∞—Ü—ñ—é, –∫–æ–ª–∏ —É –≤—á–∏—Ç–µ–ª—è –≤–∏—Ö—ñ–¥–Ω–∏–π
            await message.answer("–í–∞–º –ø–æ—â–∞—Å—Ç–∏–ª–æ! –£—Ä–æ–∫—ñ–≤ –Ω–µ–º–∞—î")
            await message.answer_sticker("CAACAgIAAxkBAAEOZ1loFUxiV3fJxTbJ0Q6iD6LDAkhsxwACBTgAAp17sEknYmmEwwt6pTYE")
            return
        
        prompt = f'<b>–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—ñ–≤ –Ω–∞ {"–∑–∞–≤—Ç—Ä–∞" if offset > 0 else "—Å—å–æ–≥–æ–¥–Ω—ñ"}</b>\n\n'

        # TODO: –∑—Ä–æ–±–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —â–µ –æ–¥–Ω–æ–≥–æ –≤—á–∏—Ç–µ–ª—è –∑ —è–∫–∏–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–∫ (–¥—Ä—É–≥–∞ –ø—ñ–¥–≥—Ä—É–ø–∞)
        # TODO: —Ä–æ–±–∏–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∏ —î –¥–≤–∞ split(',')
        # TODO: —è–∫—â–æ —î, —Ç–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –¥–µ –≤—á–∏—Ç–µ–ª—å != —ñ–º–µ–Ω—ñ –≤—á–∏—Ç–µ–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        # TODO: –≤–∏–≤–æ–¥–∏–º–æ —Ü—é —á–∞—Å—Ç–∏–Ω—É teacher –≤ schedule

        for lesson_id, subject, form in results:
            prompt += f"<b>{lesson_id}</b>: {subject} –∑ {form}\n"

        prompt += "\n<i>–ó–Ω–∞–π—à–ª–∏ –Ω–µ—Ç–æ—á–Ω—ñ—Å—Ç—å? –ë—É–¥—å-–ª–∞—Å–∫–∞ –ø–æ–≤—ñ–¥–æ–º—Ç–µ @noinsts</i>"

        await message.answer(
            prompt,
            parse_mode=ParseMode.HTML
        )
            

class LessonsTodayHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(self.today, F.text == 'üìÖ –ö–ª–∞—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')

    async def today(self, message: Message, db: DBConnector) -> None:
        tn = await db.register.get_teacher_name(message.from_user.id)
        await GenerateMessage().send(message, tn, 0, self.kyiv_tz)


class LessonsTomorrowHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(self.tomorrow, F.text == 'üåÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')

    async def tomorrow(self, message: Message, db: DBConnector) -> None:
        tn = await db.register.get_teacher_name(message.from_user.id)
        await GenerateMessage().send(message, tn, 1, self.kyiv_tz)
