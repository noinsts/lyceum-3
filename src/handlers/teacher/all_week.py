from collections import defaultdict

from aiogram import F
from aiogram.types import Message
from aiogram.enums import ParseMode

from ..base import BaseHandler
from src.db.connector import DBConnector

WEEKDAYS = ('–ü–û–ù–ï–î–Ü–õ–û–ö', '–í–Ü–í–¢–û–†–û–ö', '–°–ï–†–ï–î–ê', '–ß–ï–¢–í–ï–†', "–ü'–Ø–¢–ù–ò–¶–Ø")


class AllWeekHandler(BaseHandler):
    def register_handler(self):
        self.router.message.register(self.all_week, F.text == 'üìù –¢–∏–∂–Ω–µ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥')

    async def all_week(self, message: Message, db: DBConnector) -> None:
        teacher_name = await db.register.get_teacher_name(message.from_user.id)
        results = self.sheet.teacher.get_lessons(teacher_name)

        if not results:
            await message.answer(
                "–°—Ö–æ–∂–µ, —É –≤–∞—Å —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫—É. "
                "–í—ñ—Ç–∞—é, –≤–∏ –∞–±–æ –≤ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ, –∞–±–æ –¥—É–∂–µ —â–∞—Å–ª–∏–≤–∏–π –≤–∏–∫–ª–∞–¥–∞—á üòé"
            )
            return

        by_day = defaultdict(list)

        for day, lesson_id, subject, form in results:
            by_day[day].append((lesson_id, subject, form))

        prompt = "<b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å</b>\n\n"

        for day in WEEKDAYS:
            if day not in by_day:
                continue

            prompt += f"\n<b>{day.capitalize()}</b>\n"

            for number, subject, form in sorted(by_day[day]):
                prompt += f"<b>{number}</b>: {subject} –∑ {form}\n"

        await message.answer(
            prompt,
            parse_mode=ParseMode.HTML
        )
