from enum import Enum
import re

from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from src.db.connector import DBConnector
from src.db.schemas import AddUserSchema
from src.handlers.base import BaseHandler
from src.utils import RegisterStates, classes, parse_hub_keyboard
from src.keyboards.reply import GetType, GetClass, HubMenu, HubTeacher
from src.enums import DBUserType


USER_TYPE_PRETTY = {
    "student": "–£—á–µ–Ω—å",
    "teacher": "–í—á–∏—Ç–µ–ª—å"
}


class UserType(str, Enum):
    STUDENT = "üë®‚Äçüéì –£—á–µ–Ω—å"
    TEACHER = "üë®‚Äçüè´ –í—á–∏—Ç–µ–ª—å"
    CMD_START = "/start"


class RegisterHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(
            self.start_register,
            Command('register')
        )

        self.router.message.register(
            self.get_type,
            RegisterStates.waiting_for_type
        )

        self.router.message.register(
            self.get_class,
            RegisterStates.waiting_for_class
        )
        self.router.message.register(
            self.get_teacher_name,
            RegisterStates.waiting_for_teacher_name
        )

        self.router.message.register(
            self.get_student_name,
            RegisterStates.waiting_for_student_name
        )

        self.router.message.register(
            self.finally_register,
            RegisterStates.finally_register
        )

    @staticmethod
    async def start_register(message: Message, state: FSMContext) -> None:
        """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: –ø–∏—Ç–∞—î —Ç–∏–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—É—á–µ–Ω—å/–≤—á–∏—Ç–µ–ª—å)"""
        await message.answer("–•—Ç–æ –≤–∏? –û–±–µ—Ä—ñ—Ç—å –Ω–∏–∂—á–µ üëá", reply_markup=GetType().get_keyboard())
        await state.set_state(RegisterStates.waiting_for_type)

    @staticmethod
    async def get_type(message: Message, state: FSMContext, db: DBConnector) -> None:
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å FSM –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π state"""
        match message.text:
            case UserType.STUDENT.value:
                await state.update_data(user_type=DBUserType.STUDENT)
                await state.set_state(RegisterStates.waiting_for_class)
                await message.answer(
                    "–ó—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à –∫–ª–∞—Å",
                    reply_markup=GetClass().get_keyboard(classes.CLASSES)
                )

            case UserType.TEACHER.value:
                await state.update_data(user_type=DBUserType.TEACHER)
                await state.set_state(RegisterStates.waiting_for_teacher_name)
                await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ü (–ø–æ–≤–Ω—ñ—Å—Ç—é)", reply_markup=ReplyKeyboardRemove())

            case UserType.CMD_START.value:
                await state.clear()
                # —ñ–º–ø–æ—Ä—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ —Ü–∏–∫–ª—É –∑–∞–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É
                from .start import StartHandler
                await StartHandler().start_cmd(message, state, db)

            case _:
                await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá")
                return

    @staticmethod
    def normalize_class(raw: str) -> str | None:
        """–í–∞–ª—ñ–¥—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –∫–ª–∞—Å—É: —Ü–∏—Ñ—Ä–∞ (1‚Äì12) + —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞ (–ê‚Äì–Ø)"""

        match = re.match(r"^(\d{1,2})[- ]?([–ê-–Ø–Ü–á–Ñ“ê])$", raw.strip().upper())

        """
        ^         ‚Äî –ø–æ—á–∞—Ç–æ–∫ —Ä—è–¥–∫–∞
        (\d{1,2}) ‚Äî –æ–¥–Ω–∞ –∞–±–æ –¥–≤—ñ —Ü–∏—Ñ—Ä–∏ (–∫–ª–∞—Å)
        [- ]?     ‚Äî –Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π –¥–µ—Ñ—ñ—Å –∞–±–æ –ø—Ä–æ–±—ñ–ª
        [–ê-–Ø–Ü–á–Ñ]  ‚Äî –æ–¥–Ω–∞ –≤–µ–ª–∏–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞ (–ø–∞—Ä–∞–ª–µ–ª—å –∫–ª–∞—Å—É)
        $         ‚Äî –∫—ñ–Ω–µ—Ü—å —Ä—è–¥–∫–∞
        """

        if not match:
            return None

        # –ü—Ä–∏–≤–æ–¥–∏–º–æ –∫–ª–∞—Å –¥–æ —Ñ–æ—Ä–º–∞—Ç—É: 9-–ê ‚Üí 9-–ê (–∑ –¥–µ—Ñ—ñ—Å–æ–º —Ç–∞ –≤–µ–ª–∏–∫–æ—é –ª—ñ—Ç–µ—Ä–æ—é)
        return f"{int(match.group(1))}-{match.group(2)}"

        # TODO: –≤–∏–Ω–µ—Å—Ç–∏ –≤ src/utils/

    async def get_class(self, message: Message, state: FSMContext, db: DBConnector) -> None:
        """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–ª–∞—Å—É, –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ–æ—Ä–º–∞—Ç, –≤—ñ–∫–æ–≤–µ –æ–±–º–µ–∂–µ–Ω–Ω—è —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª–∞—Å—É –≤ –±–∞–∑—ñ"""
        form = self.normalize_class(message.text)

        # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –∫–ª–∞—Å —É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        if not form:
            await message.answer("–ê —è–∫—â–æ –ø–æ —á–µ—Å–Ω–æ–º—É? –í–≤–æ–¥—å —â–æ—Å—å —Ç–∏–ø—É '9-A' üòâ")
            return

        # –Ø–∫—â–æ –∫–ª–∞—Å –Ω–∏–∂—á–µ 5 ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —â–µ —Ä–∞–Ω–æ –≤ Telegram üòÖ
        if int(form.split("-")[0]) < 5:
            await message.answer(
                "–í–∞–º –¥—É–∂–µ –º–∞–ª–æ —Ä–æ–∫—ñ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º—É\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–¥–∞–ª—ñ—Ç—å –π–æ–≥–æ —ñ –Ω–µ –∑–≥–∞–¥—É–π—Ç–µ –¥–æ 5-–≥–æ –∫–ª–∞—Å—É üå±"
            )
            return

        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª–∞—Å—É —á–∏ —î –≤—ñ–Ω –≤ —à–∫–æ–ª—ñ
        if form not in classes.CLASSES:
            await message.answer("–¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—É –≤ –Ω–∞—Å –Ω–µ–º–∞—î. –ú–æ–∂–µ, –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–µ —â–µ —Ä–∞–∑? ü§î")
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ –≤ –º–∞—à–∏–Ω—ñ —Å—Ç–∞–Ω—ñ–≤ (FSM)
        await state.update_data(form=form)
        await state.set_state(RegisterStates.waiting_for_student_name)

        # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ feedback
        await message.answer("–î–æ–±—Ä–µ, —Ç–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –õ–µ–ø—Å—å–∫–∏–π –ê—Ä—Ç–µ–º")

    async def get_student_name(self, message: Message, state: FSMContext, db: DBConnector) -> None:
        student_name = message.text

        # TODO: –¥–æ–¥–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏ —Ç–∞ –ø–∞—Ä—Å–µ—Ä–∏ student_name

        await state.update_data(student_name=student_name)
        await state.set_state(RegisterStates.finally_register)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –µ—Ç–∞–ø –≤—Ä—É—á–Ω—É (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –∞ —á–µ—Ä–µ–∑ –∫–æ–¥)
        await self.finally_register(message, state, db)

    async def get_teacher_name(self, message: Message, state: FSMContext, db: DBConnector) -> None:
        """–ó–∞–ø–∏—Ç –≤ —É—á–∏—Ç–µ–ª—è –π–æ–≥–æ –ü–Ü–ü"""
        teacher_name = message.text

        # TODO: Biletska guard

        # TODO: –∑—Ä–æ–±–∏—Ç—å teacher checker

        # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–∏–π –ü–Ü–ü –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ —Å–ø–∏—Å–∫—É –≤—á–∏—Ç–µ–ª—ñ–≤ —à–∫–æ–ª–∏
        # if not self.db.register.teacher_checker(teacher_name):
        #     await message.answer(
        #         "üö´ –¢–∞–∫–æ–≥–æ –ü–Ü–ü –Ω–µ–º–∞—î –≤ –Ω–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –≤—á–∏—Ç–µ–ª—ñ–≤. "
        #         "–ú–æ–∂–ª–∏–≤–æ, –≤–∏ –≤–≤–µ–ª–∏ –∑ –ø–æ–º–∏–ª–∫–æ—é –∞–±–æ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ –¥–æ –±–∞–∑–∏.\n"
        #         "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @noinsts üë®‚Äçüíª"
        #     )
        #     return

        # TODO: –∑—Ä–æ–±–∏—Ç—å —Ç—É—Ç

        # —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—è–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –±–¥
        if await db.register.clone_teacher(teacher_name):
            await message.answer(
                "üí• <b>–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —Ö—Ç–æ—Å—å –∑ —Ç–∞–∫–∏–º —ñ–º'—è –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. "
                "–¶–µ –Ω–µ –∑–∞–≤–∞–¥–∏—Ç—å –≤–∞–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ø—Ä–æ–µ–∫—Ç–æ–º, "
                "–ø—Ä–æ—Ç–µ —è–∫—â–æ –≤–∞–º —Ü–µ –Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @noinsts</b>",
                parse_mode=ParseMode.HTML
            )

        # –í–∞–ª—ñ–¥—É—î–º–æ —Ö–æ—á–∞ –± –ø–æ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ 3 —Å–ª—ñ–≤
        if len(teacher_name.split()) < 3:
            await message.answer("–ü–Ü–ü –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç—Ä–∏ —Å–ª–æ–≤–∞ (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ –≤ –º–∞—à–∏–Ω—ñ —Å—Ç–∞–Ω—ñ–≤ (FSM)
        await state.update_data(teacher_name=teacher_name)
        await state.set_state(RegisterStates.finally_register)

        # TODO: —Ç—ñ–ª—å–∫–∏ –Ω–∞ –µ—Ç–∞–ø—ñ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–º–æ–∂–ª–∏–≤–æ –¥–æ –∂–æ–≤—Ç–Ω—è)
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ–∫–∏ —â–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—á–∏—Ç–µ–ª—ñ–≤ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ, –º–æ–∂–ª–∏–≤–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π, "
            "–±—É–¥—å-–ª–∞—Å–∫–∞ –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ —Ç–∞–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º—Ç–µ —Ç–µ—Å—Ç–µ—Ä—ñ–≤</b>",
            parse_mode=ParseMode.HTML
        )

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –µ—Ç–∞–ø –≤—Ä—É—á–Ω—É (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –∞ —á–µ—Ä–µ–∑ –∫–æ–¥)
        await self.finally_register(message, state, db)

    @staticmethod
    async def finally_register(message: Message, state: FSMContext, db: DBConnector) -> None:
        """–§—ñ–Ω–∞–ª —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: –∑–∞–ø–∏—Å —É –±–∞–∑—É, –ø–æ–∫–∞–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""

        # –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        data = await state.get_data()
        user_type = data.get("user_type")
        form = data.get("form")
        teacher_name = data.get("teacher_name")
        student_name = data.get("student_name")

        # –∑–∞–ø–∏—Å—É—î–º–æ —ñ–Ω—Ñ—É –≤ –±–¥
        await db.register.add_user(
            AddUserSchema(
                user_id=int(message.from_user.id),
                full_name=message.from_user.full_name,
                username=message.from_user.username,
                user_type=user_type,
                form=form,
                teacher_name=teacher_name,
                student_name=student_name
            )
        )

        # —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–ø—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        msg = (
            f"‚úÖ <b>–£—Å–ø—ñ—Ö! –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ!</b>\n\n"
            f"<b>–¢–∏–ø:</b> {USER_TYPE_PRETTY.get(user_type, user_type)}\n"
        )
        if user_type == "student":
            msg += (f"<b>–ö–ª–∞—Å</b>: {form}\n"
                    f"<b>–Ü–º'—è</b>: {student_name}")
        elif user_type == "teacher":
            msg += f"<b>–ü–Ü–ü:</b> {teacher_name}\n"
        msg += "\n‚ùì –Ø–∫—â–æ –≤–∏ –∑—Ä–æ–±–∏–ª–∏ –æ–¥—Ä—É–∫, —Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"

        # –≤–∏–≤–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.answer(
            msg,
            reply_markup=await parse_hub_keyboard(message.from_user.id),
            parse_mode=ParseMode.HTML
        )

        # –∑–∞–∫—Ä–∏–≤–∞—î–º–æ FSM
        await state.clear()
