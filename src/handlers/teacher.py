from collections import defaultdict

from aiogram import F
from aiogram.enums import ParseMode
from aiogram.types import Message

from .base import BaseHandler

class TeacherHandler(BaseHandler):
    def __init__(self):
        super().__init__()
        self.WEEKEND_PROMPT = "–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π! –ß–æ–º—É –≤–∏ –¥—É–º–∞—î—Ç–µ –ø—Ä–æ —Ä–æ–±–æ—Ç—É? –ú–æ–∂–µ –∫—Ä–∞—â–µ –≤—ñ–¥–ø–æ—á–∏—Ç–∏ üôÇ‚Äç‚ÜïÔ∏è"
        self.WEEKEND_STICKER = "CAACAgIAAxkBAAEOZ1doFUn9Y0TR-qURiQeEb7HZdGC2qQACOjMAAlG5gEjH0Q7wxWFwrDYE"
        self.HAPPY_GUY = "CAACAgIAAxkBAAEOZ1loFUxiV3fJxTbJ0Q6iD6LDAkhsxwACBTgAAp17sEknYmmEwwt6pTYE"


    def register_handler(self) -> None:
        self.router.message.register(self.my_post, F.text == 'üö¶ –ú—ñ–π –ø–æ—Å—Ç')
        self.router.message.register(self.lessons_today, F.text == 'üìÖ –ö–ª–∞—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')
        self.router.message.register(self.all_week, F.text == 'üìù –¢–∏–∂–Ω–µ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥')
        self.router.message.register(self.lessons_tomorrow, F.text == 'üåÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')


    async def my_post(self, message: Message) -> None:
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ üö¶ –ú—ñ–π –ø–æ—Å—Ç"""
        self.db.register.update_udata(message.from_user)  # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω—ñ–∫–Ω–µ–π–º

        week_name: int = message.date.astimezone(self.kyiv_tz).weekday()

        # –æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó, —è–∫—â–æ –¥–µ–Ω—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è - –≤–∏—Ö—ñ–¥–Ω–∏–π
        if week_name > 4:
            await message.answer(self.WEEKEND_PROMPT)
            await message.answer_sticker(self.WEEKEND_STICKER)
            return

        week_name: str = self.cfg._config.get(str(week_name))
        teacher_name = self.db.register.get_teacher_name(message.from_user.id)

        if not teacher_name:
            await message.answer(
                "‚ö†Ô∏è <b>–í–∏–±–∞—á—Ç–µ, –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –±—É–¥—å-–ª–∞—Å–∫–∞, "
                "—Å–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä–µ—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /register</b>",
                parse_mode=ParseMode.HTML
            )
            return

        result = self.db.teacher.get_post(week_name, teacher_name)

        if not result:
            await message.answer("–í–∞–º –ø–æ—â–∞—Å—Ç–∏–ª–æ! –°—å–æ–≥–æ–¥–Ω—ñ –≤–∏ –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –¥–æ –ø–æ—Å—Ç—É, –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ—á–∏—Ç–∏")
            await message.answer_sticker(self.HAPPY_GUY)
            return

        await message.answer(
            f"–ù–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ \n\n"
            f"–°—å–æ–≥–æ–¥–Ω—ñ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–æ–≤–µ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è –Ω–∞ \"<b>{result}</b>\"",
            parse_mode=ParseMode.HTML
        )


    def _generate_message(self, results, is_tomorrow: bool = False) -> str:
        day = "–∑–∞–≤—Ç—Ä–∞" if is_tomorrow else "—Å—å–æ–≥–æ–¥–Ω—ñ"
        prompt = f'<b>–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—ñ–≤ –Ω–∞ {day}</b>\n\n'

        # TODO: –∑—Ä–æ–±–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —â–µ –æ–¥–Ω–æ–≥–æ –≤—á–∏—Ç–µ–ª—è –∑ —è–∫–∏–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–∫ (–¥—Ä—É–≥–∞ –ø—ñ–¥–≥—Ä—É–ø–∞)
        # TODO: —Ä–æ–±–∏–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∏ —î –¥–≤–∞ split(',')
        # TODO: —è–∫—â–æ —î, —Ç–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –¥–µ –≤—á–∏—Ç–µ–ª—å != —ñ–º–µ–Ω—ñ –≤—á–∏—Ç–µ–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        # TODO: –≤–∏–≤–æ–¥–∏–º–æ —Ü—é —á–∞—Å—Ç–∏–Ω—É teacher –≤ schedule

        for lesson_id, subject, form in results:
            prompt += f"<b>{lesson_id}</b>: {subject} –∑ {form}\n"

        prompt += "\n<i>–ó–Ω–∞–π—à–ª–∏ –Ω–µ—Ç–æ—á–Ω—ñ—Å—Ç—å? –ë—É–¥—å-–ª–∞—Å–∫–∞ –ø–æ–≤—ñ–¥–æ–º—Ç–µ @noinsts</i>"

        return prompt


    async def lessons_today(self, message: Message) -> None:
        self.db.register.update_udata(message.from_user)  # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω—ñ–∫–Ω–µ–π–º

        week_name: int = message.date.astimezone(self.kyiv_tz).weekday()

        # –æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó, —è–∫—â–æ –¥–µ–Ω—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è - –≤–∏—Ö—ñ–¥–Ω–∏–π
        if week_name > 4:
            await message.answer(self.WEEKEND_PROMPT)
            await message.answer_sticker(self.WEEKEND_STICKER)
            return

        week_name: str = self.cfg._config.get(str(week_name))
        teacher_name = self.db.register.get_teacher_name(message.from_user.id)


        if not teacher_name:
            await message.answer(
                "‚ö†Ô∏è <b>–í–∏–±–∞—á—Ç–µ, –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –±—É–¥—å-–ª–∞—Å–∫–∞, "
                "—Å–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä–µ—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /register</b>",
                parse_mode=ParseMode.HTML
            )
            return

        results = self.sheet.teacher.get_lessons_today(week_name, teacher_name)

        if not results:
            await message.answer("–°—å–æ–≥–æ–¥–Ω—ñ —É –≤–∞—Å –≤–∏—Ö—ñ–¥–Ω–∏–π!")
            await message.answer_sticker(self.HAPPY_GUY)
            return

        prompt = self._generate_message(results)

        await message.answer(
            prompt,
            parse_mode=ParseMode.HTML
        )


    async def lessons_tomorrow(self, message: Message) -> None:
        self.db.register.update_udata(message.from_user)  # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω—ñ–∫–Ω–µ–π–º

        week_name: int = message.date.astimezone(self.kyiv_tz).weekday() + 1

        # –æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó, —è–∫—â–æ –¥–µ–Ω—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è - –≤–∏—Ö—ñ–¥–Ω–∏–π
        if week_name > 4:
            await message.answer(self.WEEKEND_PROMPT)
            await message.answer_sticker(self.WEEKEND_STICKER)
            return

        week_name: str = self.cfg._config.get(str(week_name))
        teacher_name = self.db.register.get_teacher_name(message.from_user.id)

        if not teacher_name:
            await message.answer(
                "‚ö†Ô∏è <b>–í–∏–±–∞—á—Ç–µ, –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –±—É–¥—å-–ª–∞—Å–∫–∞, "
                "—Å–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä–µ—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /register</b>",
                parse_mode=ParseMode.HTML
            )
            return

        results = self.sheet.teacher.get_lessons_today(teacher_name, week_name)

        if not results:
            await message.answer("–ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –≤–∏—Ö—ñ–¥–Ω–∏–π!")
            await message.answer_sticker(self.HAPPY_GUY)
            return

        prompt = self._generate_message(results, is_tomorrow=True)

        await message.answer(
            prompt,
            parse_mode=ParseMode.HTML
        )


    async def all_week(self, message: Message) -> None:
        tn = self.db.register.get_teacher_name(message.from_user.id)
        results = self.db.teacher.get_all_week(tn)

        by_day = defaultdict(list)

        for day, lesson_id, subject, form in results:
            by_day[day].append((lesson_id, subject, form))

        prompt = "<b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å</b>\n\n"

        for day, lessons in by_day.items():
            prompt += f"\n<b>{day.capitalize()}</b>\n"
            for number, subject, form in lessons:
                prompt += f"<b>{number}</b>: {subject} –∑ {form}\n"

        await message.answer(
            prompt,
            parse_mode=ParseMode.HTML
        )
