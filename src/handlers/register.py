from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from .base import BaseHandler
from src.utils import RegisterStates
from src.keyboards.reply import GetType, GetClass, HubMenu, HubTeacher
from src.utils import classes


class RegisterHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.message.register(self.get_type, RegisterStates.waiting_for_type)
        self.router.message.register(self.get_class, RegisterStates.waiting_for_class)
        self.router.message.register(self.get_teacher_name, RegisterStates.waiting_for_teacher_name)
        self.router.message.register(self.finally_register, RegisterStates.finally_register)
        self.router.message.register(self.start_register, Command('register'))


    @staticmethod
    async def start_register(message: Message, state: FSMContext) -> None:
        """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
        await message.answer("–•—Ç–æ –≤–∏? –û–±–µ—Ä—ñ—Ç—å –Ω–∏–∂—á–µ üëá", reply_markup=GetType().get_keyboard())
        await state.set_state(RegisterStates.waiting_for_type)


    @staticmethod
    async def get_type(message: Message, state: FSMContext) -> None:
        """–ó–∞–ø–∏—Ç –≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ö—Ç–æ –≤—ñ–Ω"""
        user_type = message.text

        if user_type == 'üë®‚Äçüéì –£—á–µ–Ω—å':
            await state.update_data(user_type="student")
            await message.answer("–ó—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à –∫–ª–∞—Å", reply_markup=GetClass().get_keyboard())
            await state.set_state(RegisterStates.waiting_for_class)
        elif user_type == 'üë®‚Äçüè´ –í—á–∏—Ç–µ–ª—å':
            await state.update_data(user_type='teacher')
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë", reply_markup=ReplyKeyboardRemove())
            await state.set_state(RegisterStates.waiting_for_teacher_name)
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É")
            return


    async def get_class(self, message: Message, state: FSMContext) -> None:
        """–ó–∞–ø–∏—Ç –≤ —É—á–Ω—è, –≤ —è–∫–æ–º—É –≤—ñ–Ω –∫–ª–∞—Å—ñ"""
        user_class = message.text

        if int(user_class.split('-')[0]) < 5:
            await message.answer("–í–∞–º –¥—É–∂–µ –º–∞–ª–æ —Ä–æ–∫—ñ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º—É, –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–∏–¥—ñ–ª—ñ—Ç—å –π–æ–≥–æ —ñ –Ω–µ –∑–≥–∞–¥—É–π—Ç–µ –ø—Ä–æ –Ω—å–æ–≥–æ –¥–æ 5 –∫–ª–∞—Å—É :(")
            return

        if user_class not in classes.CLASSES:
            await message.answer("–ê —è–∫—â–æ –ø–æ —á–µ—Å–Ω–æ–º—É?")
            return

        await state.update_data(user_class=user_class)
        await state.set_state(RegisterStates.finally_register)

        data = await state.get_data()
        user_type = data.get('user_type')
        form = data.get('user_class')

        # –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–¥
        self.db.register.add_user(
            message.from_user.id, user_type, message.from_user.full_name,
            message.from_user.username, form, None
        )

        await state.clear()
        await self.finally_register(message)


    async def get_teacher_name(self, message: Message, state: FSMContext) -> None:
        """–ó–∞–ø–∏—Ç –≤ —É—á–∏—Ç–µ–ª—è –π–æ–≥–æ –ü–Ü–ë"""
        teacher_name = message.text

        # TODO: Biletska guard

        # TODO: —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≤—á–∏—Ç–µ–ª—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –≤–≤–µ–¥–µ–Ω–µ —ñ–º'—è –≤ —Å–ø–∏—Å–∫—É

        await state.update_data(teacher_name=teacher_name)
        await state.set_state(RegisterStates.finally_register)

        data = await state.get_data()
        user_type = data.get('user_type')
        teacher_name = data.get('teacher_name')

        if self.db.register.clone_teacher(teacher_name):
            await message.answer(
                "üí• <b>–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —Ö—Ç–æ—Å—å –∑ —Ç–∞–∫–∏–º —ñ–º'—è –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. "
                "–¶–µ –Ω–µ –∑–∞–≤–∞–¥–∏—Ç—å –≤–∞–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ø—Ä–æ–µ–∫—Ç–æ–º, "
                "–ø—Ä–æ—Ç–µ —è–∫—â–æ –≤–∞–º —Ü–µ –Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @noinsts</b>",
                parse_mode=ParseMode.HTML
            )

        # –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–¥
        self.db.register.add_user(
            message.from_user.id, user_type, message.from_user.full_name,
            message.from_user.username, None, teacher_name
        )

        await message.answer("‚ö†Ô∏è <b>–ü–æ–∫–∏ —â–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—á–∏—Ç–µ–ª—ñ–≤ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ, –º–æ–∂–ª–∏–≤–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π, –±—É–¥—å-–ª–∞—Å–∫–∞ –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ —Ç–∞–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º—Ç–µ —Ç–µ—Å—Ç–µ—Ä—ñ–≤</b>", parse_mode=ParseMode.HTML)

        await state.clear()
        await self.finally_register(message, is_teacher=True)


    async def finally_register(self, message: Message, is_teacher: bool = False) -> None:
        """–ë–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –∑ –±–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å"""

        user_id = message.from_user.id

        db_type = self.db.register.get_type(user_id)
        db_class = self.db.register.get_class(user_id)
        db_teacher_name = self.db.register.get_teacher_name(user_id)

        await message.answer(
            f"‚úÖ <b>–£—Å–ø—ñ—Ö! –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ!</b>\n\n"
            f"<b>–¢–∏–ø:</b> {db_type}\n"
            f"<b>–ö–ª–∞—Å:</b> {db_class if db_class else "-"}\n"
            f"<b>–ü–Ü–ë:</b> {db_teacher_name if db_teacher_name else "-"}\n\n"
            f"‚ùì –Ø–∫—â–æ –≤–∏ –∑—Ä–æ–±–∏–ª–∏ –æ–¥—Ä—É–∫, —Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
            reply_markup=HubTeacher().get_keyboard() if is_teacher else HubMenu().get_keyboard(),
            parse_mode=ParseMode.HTML
        )
