import asyncio
from abc import ABC, abstractmethod
from typing import Dict, List, Any
from dataclasses import dataclass

from aiogram import Bot, F
from aiogram.types import CallbackQuery
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest

from ...base import BaseHandler
from src.bot_instance import get_bot
from src.keyboards.inline import BackButton


@dataclass(frozen=True)
class Messages:
    TITLE: str = (
        "<b>–°–ø–∏—Å–æ–∫ {user_type} –ø—Ä–æ—î–∫—Ç—É</b>:\n\n"
    )

    USER_INFO: str = (
        "üë§ <b>{first_name}</b> (@{username}) | ID: <code>{uid}</code>\n"
    )

    USER_NOT_FOUND: str = (
        "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID <code>{uid}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
    )


class SpecialListHandler(BaseHandler, ABC):
    @property
    @abstractmethod
    def triggers(self) -> Dict[str, str]:
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä—ñ–≤ –æ–±—Ä–æ–±–Ω–∏–∫–∞.

        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä–∞ —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'.

        Returns:
            Dict[str, str]: –°–ª–æ–≤–Ω–∏–∫ –∑ –∫–ª—é—á–∞–º–∏ 'hub' (—Ç—Ä–∏–≥–µ—Ä –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è)
                            —Ç–∞ 'handler' (—Ç—Ä–∏–≥–µ—Ä –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞).
        """
        pass

    @property
    @abstractmethod
    def user_type(self) -> str:
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

        –ü—Ä–∏–∫–ª–∞–¥: "–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", "—Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤". –¶–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

        Returns:
            str: –†—è–¥–æ–∫, —â–æ –æ–ø–∏—Å—É—î —Ç–∏–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –º–Ω–æ–∂–∏–Ω—ñ.
        """
        pass

    @property
    @abstractmethod
    def user_ids(self) -> List[int]:
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ Telegram User ID.
        """

    def register_handler(self) -> None:
        self.router.callback_query.register(
            self.handler,
            F.data == self.triggers['handler']
        )

    async def handler(self, callback: CallbackQuery) -> None:
        bot = get_bot()

        tasks = [self._get_user_id(bot, uid) for uid in self.user_ids]
        user_info_list = await asyncio.gather(*tasks)

        prompt = self._create_prompt(user_info_list)

        await callback.message.edit_text(
            prompt,
            reply_markup=BackButton().get_keyboard(self.triggers['hub']),
            parse_mode=ParseMode.HTML
        )

    @classmethod
    async def _get_user_id(cls, bot: Bot, uid: int) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            info = await bot.get_chat(uid)

            return {
                "uid": uid,
                "username": info.username or '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                "first_name": info.first_name or '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                "found": True
            }

        except TelegramBadRequest:
            return {
                "uid": uid,
                "found": False
            }

    def _create_prompt(self, user_info_list: List[Dict[str, Any]]) -> str:
        """–°—Ç–≤–æ—Ä—é—î –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        prompt = Messages.TITLE.format(user_type=self.user_type)
        for user_info in user_info_list:
            if user_info["found"]:
                prompt += Messages.USER_INFO.format(
                    uid=user_info['uid'],
                    username=user_info['username'],
                    first_name=user_info['first_name']
                )
            else:
                prompt += Messages.USER_NOT_FOUND.format(
                    uid=user_info['uid']
                )
        return prompt
