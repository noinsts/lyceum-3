from abc import ABC, abstractmethod
from typing import Type

from aiogram import F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from ...base import BaseHandler
from src.filters.callbacks import DeveloperBlockCallback, DeveloperBlockEnum
from src.keyboards.inline import DeveloperBlockType, SubmitKeyboard
from src.validators import validate_teacher_name, validate_user_id
from src.db.connector import DBConnector
from src.states.developer import AccessBlock, AccessUnblock


class BaseBlockerAccessHandler(BaseHandler, ABC):
    def __init__(self):
        self.handler_trigger = self.get_handler_trigger()
        self.submit_trigger = self.get_submit_trigger()
        self.cancel_trigger = self.get_cancel_trigger()
        self.state = self.get_curr_state()

        super().__init__()

    @abstractmethod
    def get_curr_state(self) -> Type[AccessBlock | AccessUnblock]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫–ª–∞—Å FSM"""
        pass

    @abstractmethod
    def get_handler_trigger(self) -> str:
        """–¢—Ä–∏–≥–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö–µ–Ω–¥–µ—Ä—É"""
        pass

    @abstractmethod
    def get_submit_trigger(self) -> str:
        """–¢—Ä–∏–≥–µ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–µ–Ω–Ω—è"""
        pass

    @abstractmethod
    def get_cancel_trigger(self) -> str:
        """–¢—Ä–∏–≥–µ—Ä –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"""
        pass

    @abstractmethod
    def get_action_name(self) -> str:
        """–ù–∞–∑–≤–∞ –¥—ñ—ó (–±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏)"""
        pass

    @abstractmethod
    def get_success_message(self) -> str:
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
        pass

    @abstractmethod
    def get_already_processed_message(self) -> str:
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–ª–∏ –¥—ñ—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω–∞"""
        pass

    @abstractmethod
    async def get_check_can_process(self, user_id: int, teacher_name: str, db: DBConnector) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é"""
        pass

    @abstractmethod
    def is_verified(self) -> bool:
        """–õ–æ–≥—ñ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        pass

    def register_handler(self) -> None:
        self.router.callback_query.register(
            self.handler,
            F.data == self.handler_trigger
        )

        self.router.callback_query.register(
            self.get_type,
            DeveloperBlockCallback.filter(),
            self.state.waiting_for_type
        )

        self.router.message.register(
            self.get_user_id,
            F.text,
            self.state.waiting_for_user_id
        )

        self.router.message.register(
            self.get_teacher_name,
            F.text,
            self.state.waiting_for_teacher_name
        )

        self.router.callback_query.register(
            self.submit,
            F.data == self.submit_trigger,
            self.state.waiting_for_confirmation
        )

        self.router.callback_query.register(
            self.cancel,
            F.data == self.submit_trigger,
            self.state.waiting_for_confirmation
        )

    async def handler(self, callback: CallbackQuery, state: FSMContext) -> None:
        await state.set_state(self.state.waiting_for_type)

        await callback.message.answer(
            f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø {self.get_action_name()}",
            reply_markup=DeveloperBlockType().get_keyboard()
        )

        await callback.answer()

    async def get_type(self, callback: CallbackQuery, callback_data: DeveloperBlockCallback, state: FSMContext) -> None:
        value = callback_data.method

        match value:
            case DeveloperBlockEnum.BY_ID:
                response = "–î–æ–±—Ä–µ, –≤–≤–µ–¥—ñ—Ç—å <b>Telegram ID</b> –¥–ª—è –ø–æ—à—É–∫—É"
                fsm = self.state.waiting_for_user_id
            case DeveloperBlockEnum.BY_TEACHER_NAME:
                response = "–î–æ–±—Ä–µ, –≤–≤–µ–¥—ñ—Ç—å <b>—ñ–º'—è –≤—á–∏—Ç–µ–ª—è</b> –¥–ª—è –ø–æ—à—É–∫—É"
                fsm = self.state.waiting_for_teacher_name
            case _:
                await callback.answer(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞, –∫—É–¥–∞ –≤–∏ –Ω–∞–∂–º–∞–ª–∏...",
                    show_alert=True
                )
                return

        await state.set_state(fsm)

        await callback.message.edit_text(response, parse_mode=ParseMode.HTML)
        await callback.answer()

    async def get_user_id(self, message: Message, state: FSMContext, db: DBConnector) -> None:
        user_id = message.text

        validate, reason = validate_user_id(user_id)

        if not validate:
            await message.answer(reason)
            return

        teacher_name = await db.verification.get_teacher_name(int(user_id))

        if not teacher_name:
            await message.answer("‚ùå –í –ë–î –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ user id")
            return

        await state.update_data(user_id=int(user_id))
        await state.update_data(teacher_name=teacher_name)

        await state.set_state(self.state.waiting_for_confirmation)
        await self._send_feedback(message, state)

    async def get_teacher_name(self, message: Message, state: FSMContext, db: DBConnector) -> None:
        teacher_name = message.text

        validate, reason = await validate_teacher_name(teacher_name, db)

        if not validate:
            await message.answer(reason)
            return

        user_id = await db.verification.get_user_id(teacher_name)

        if not user_id:
            await message.answer("‚ùå –¶–µ–π –≤—á–∏—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π.")
            return

        await state.update_data(user_id=user_id)
        await state.update_data(teacher_name=teacher_name)

        await state.set_state(self.state.waiting_for_confirmation)
        await self._send_feedback(message, state)

    async def _send_feedback(self, message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        user_id = data.get("user_id")
        teacher_name = data.get("teacher_name")

        await message.answer(
            f"<b>–í–∏ —Ö–æ—á–µ—Ç–µ {self.get_action_name()} –¥–æ—Å—Ç—É–ø</b>:\n\n"
            f"üÜî: <code>{user_id}</code>\n"
            f"üßëüèª‚Äçüè´: <code>{teacher_name}</code>\n\n"
            f"<i>–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é</i>",
            reply_markup=SubmitKeyboard().get_keyboard(self.submit_trigger, self.cancel_trigger),
            parse_mode=ParseMode.HTML
        )

    async def submit(self, callback: CallbackQuery, state: FSMContext, db: DBConnector) -> None:
        data = await state.get_data()
        user_id = data.get("user_id")
        teacher_name = data.get("teacher_name")

        if not user_id or not teacher_name:
            await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            await callback.answer()
            return

        is_verif = await self.get_check_can_process(user_id, teacher_name, db)

        if not is_verif:
            await callback.message.edit_text(self.get_already_processed_message())
            await state.clear()
            await callback.answer()
            return

        try:
            await db.verification.set_access(user_id, self.is_verified())
            await callback.message.edit_text(self.get_success_message())

        except Exception as e:
            await callback.message.edit_text(
                "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ</b>\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode=ParseMode.HTML
            )
            self.log.error(f"Error in block access for user {user_id}: {e}", exc_info=True)

        finally:
            await state.clear()
            await callback.answer()

    async def cancel(self, callback: CallbackQuery, state: FSMContext) -> None:
        await self.handler(callback, state)
