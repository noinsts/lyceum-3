from typing import Optional, Tuple, List

from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from src.db.connector import DBConnector
from ...base import BaseHandler
from src.states import DevAddAccess
from src.keyboards.inline import SubmitKeyboard
from src.validators import validate_user_id, validate_teacher_name


class Triggers:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Ç—Ä–∏–≥–µ—Ä—ñ–≤ callback"""
    HANDLER = "dev_access_add"
    SUBMIT = "add_access_submit"
    CANCEL = "add_access_cancel"


class Messages:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    INITIAL_PROMPT = (
        "<b>üìù –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n"
        "<code>12345678</code>\n"
        "<code>teacher_name</code>\n\n"
        "<i>–î–µ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - user_id (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏), "
        "–¥—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ - —ñ–º'—è –≤—á–∏—Ç–µ–ª—è</i>"
    )

    VALIDATION_ERRORS = {
        "empty_data": "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ",
        "insufficient_data": "‚ö†Ô∏è –û—á—ñ–∫—É—î—Ç—å—Å—è –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (user_id —Ç–∞ teacher_name)",
        "too_many_lines": "‚ö†Ô∏è –ó–∞–±–∞–≥–∞—Ç–æ —Ä—è–¥–∫—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ user_id —Ç–∞ teacher_name"
    }

    ATTENTION = (
        "<b>‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>\n\n"
        "–ê–∫–∞—É–Ω—Ç –∑ <code>user_id = {user_id}</code> –≤–∂–µ —ñ—Å–Ω—É—î.\n"
        "–Ü–º'—è –≤—á–∏—Ç–µ–ª—è –±—É–¥–µ <b>–æ–Ω–æ–≤–ª–µ–Ω–æ</b> –∑ "
        "<code>{existing}</code> –Ω–∞ <code>{teacher_name}</code>.\n\n"
        "<i>–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?</i>"
    )

    CONFIRMATION = (
        "<b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</b>\n\n"
        "üÜî: <code>{user_id}</code>\n"
        "üßëüèª‚Äçüè´: <code>{teacher_name}</code>\n\n"
        "<i>–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?</i>"
    )

    SAVE_ERROR = (
        "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ<b>\n\n"
        "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

    DB_ERROR = (
        "‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö "
        "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

    SUCCESS = (
        "‚úÖ <b>–£—Å–ø—ñ—à–Ω–æ</b>\n\n"
        "–î–æ—Å—Ç—É–ø –¥–ª—è <code>{name}</code> "
        "(ID: <code>{user_id}</code>) –¥–æ–¥–∞–Ω–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏."
    )

    CANCELED = (
        "üîÑ <b>–°–∫–∞—Å–æ–≤–∞–Ω–æ.</b>\n\n"
        "–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞."
    )


class AddAccessHandler(BaseHandler):
    def register_handler(self) -> None:
        self.router.callback_query.register(
            self.handler,
            F.data == Triggers.HANDLER
        )

        self.router.message.register(
            self.collect_data,
            DevAddAccess.waiting_for_data
        )

        self.router.callback_query.register(
            self.submit,
            DevAddAccess.waiting_for_confirmation,
            F.data == Triggers.SUBMIT
        )

        self.router.callback_query.register(
            self.cancel,
            DevAddAccess.waiting_for_confirmation,
            F.data == Triggers.CANCEL
        )

    @staticmethod
    async def handler(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ callback"""
        await callback.answer()
        await callback.message.answer(Messages.INITIAL_PROMPT, parse_mode=ParseMode.HTML)

        await state.set_state(DevAddAccess.waiting_for_data)

    async def collect_data(self, message: Message, state: FSMContext, db: DBConnector) -> None:
        try:
            if not await self._validate_and_process_input(message, state, db):
                return

            await self._send_response(message, state, db)

        except Exception as e:
            await self._handler_db_error(message, state, e, "collect data")

    async def _validate_and_process_input(self, message: Message, state: FSMContext, db: DBConnector) -> bool:
        """–í–∞–ª—ñ–¥—É—î –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ"""
        validate, reason, lines = self._validate_data(message.text)

        if not validate:
            await message.answer(reason)
            return False

        user_id, tn = lines[0], lines[1]

        user_id_validate, reason = validate_user_id(user_id)

        if not user_id_validate:
            await message.answer(reason)
            return False

        user_id = int(user_id)

        teacher_name_validate, reason = await validate_teacher_name(tn, db)

        if not teacher_name_validate:
            await message.answer(reason)
            return False

        await state.update_data(user_id=user_id, teacher_name=tn)
        return True

    async def _send_response(self, message: Message, state: FSMContext, db: DBConnector) -> None:
        data = await state.get_data()
        user_id = data.get("user_id")
        teacher_name = data.get("teacher_name")

        existing_teacher = await db.verification.get_name(user_id)
        prompt = self._get_confirmation_prompt(user_id, teacher_name, existing_teacher)

        await message.answer(
            prompt,
            parse_mode=ParseMode.HTML,
            reply_markup=SubmitKeyboard().get_keyboard(Triggers.SUBMIT, Triggers.CANCEL)
        )

        await state.set_state(DevAddAccess.waiting_for_confirmation)

    @staticmethod
    def _validate_data(raw: Optional[str]) -> Tuple[bool, Optional[str], Optional[List]]:
        """
        –í–∞–ª—ñ–¥—É—î –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤ –º–∞—Å–∏–≤

        Args:
            raw (Optional[str]): —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏

        Returns:
            Tuple:
                - bool: —á–∏ –ø—Ä–æ–π—à–æ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
                - Optional[str]: –ø—Ä–∏—á–∏–Ω–∞ —Ñ–µ–π–ª—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
                - Optional[List]: –æ–±—Ä–æ–±–ª–µ–Ω–∏–π –º–∞—Å–∏–≤
        """
        if not raw:
            return False, Messages.VALIDATION_ERRORS['empty_data'], None

        lines = [line.strip() for line in raw.split("\n") if line.strip()]

        # –æ–±—Ä–æ–±–ª—é—î–º–æ –ø–æ–º–∏–ª–∫–∞
        if len(lines) < 2:
            return False, Messages.VALIDATION_ERRORS['insufficient_data'], None

        if len(lines) > 2:
            return False, Messages.VALIDATION_ERRORS['too_many_lines'], None

        return True, None, lines

    @staticmethod
    def _get_confirmation_prompt(user_id: int, teacher_name: str, existing: Optional[str]) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–º–ø—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        if existing:
            return Messages.ATTENTION.format(
                user_id=user_id,
                teacher_name=teacher_name,
                existing=existing
            )
        else:
            return Messages.CONFIRMATION.format(
                user_id=user_id,
                teacher_name=teacher_name
            )

    async def _handler_db_error(self, message: Message, state: FSMContext, e: Exception, context: str) -> None:
        """–û–±—Ä–æ–±–ª—é—î –ø–æ–º–∏–ª–∫–∏"""
        await message.answer(Messages.DB_ERROR, parse_mode=ParseMode.HTML)
        self.log.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å devmode/access/add: {context}: {e}")
        await state.clear()

    async def submit(self, callback: CallbackQuery, state: FSMContext, db: DBConnector) -> None:
        """–û–±—Ä–æ–±–∫–∞ callback –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è"""
        try:
            data = await state.get_data()
            user_id = data.get("user_id")
            teacher_name = data.get("teacher_name")

            await db.verification.add_verif_teacher(user_id, teacher_name)

            response = Messages.SUCCESS.format(
                name=teacher_name,
                user_id=user_id
            )

            await callback.message.edit_text(response, parse_mode=ParseMode.HTML)
            await callback.answer()

        except Exception as e:
            await callback.answer(Messages.SAVE_ERROR, show_alert=True)
            self.log.error(f"Error devmode/access/add: saving: {e}")

        finally:
            await state.clear()

    @staticmethod
    async def cancel(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–∫–∞ callback —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        await callback.answer()
        await state.clear()

        await callback.message.edit_text(Messages.CANCELED, parse_mode=ParseMode.HTML)
