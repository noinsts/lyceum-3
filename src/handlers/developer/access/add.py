import re

from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from src.db.connector import DBConnector
from ...base import BaseHandler
from src.utils.states import DevAddAccess
from src.keyboards.inline import SubmitKeyboard


class AddAccessHandler(BaseHandler):
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    MIN_USER_ID = 1
    MAX_USER_ID = 9999999999  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π user_id –≤ Telegram
    MIN_TEACHER_NAME_LENGTH = 2
    MAX_TEACHER_NAME_LENGTH = 50

    def register_handler(self) -> None:
        self.router.callback_query.register(
            self.handler,
            F.data == 'dev_access_add'
        )

        self.router.message.register(
            self.collect_data,
            DevAddAccess.waiting_for_data
        )

        self.router.callback_query.register(
            self.submit,
            DevAddAccess.waiting_for_confirmation,
            F.data == 'add_access_submit'
        )

        self.router.callback_query.register(
            self.cancel,
            DevAddAccess.waiting_for_confirmation,
            F.data == 'add_access_cancel'
        )

    @staticmethod
    async def handler(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ callback"""
        await callback.answer()

        await callback.message.answer(
            "<b>üìù –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n"
            "<code>12345678</code>\n"
            "<code>teacher_name</code>\n\n"
            "<i>–î–µ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - user_id (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏), "
            "–¥—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ - —ñ–º'—è –≤—á–∏—Ç–µ–ª—è</i>",
            parse_mode=ParseMode.HTML
        )

        await state.set_state(DevAddAccess.waiting_for_data)

    async def collect_data(self, message: Message, state: FSMContext, db: DBConnector) -> None:
        """–í–∞–ª—ñ–¥—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if not message.text:
            await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ")
            return

        lines = [line.strip() for line in message.text.split("\n") if line.strip()]

        # –æ–±—Ä–æ–±–ª—é—î–º–æ –ø–æ–º–∏–ª–∫–∞
        if len(lines) < 2:
            await message.answer("‚ö†Ô∏è –û—á—ñ–∫—É—î—Ç—å—Å—è –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (user_id —Ç–∞ teacher_name)")
            return

        if len(lines) > 2:
            await message.answer("‚ö†Ô∏è –ó–∞–±–∞–≥–∞—Ç–æ —Ä—è–¥–∫—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ user_id —Ç–∞ teacher_name")
            return

        user_id, tn = lines[0], lines[1]

        # –≤–∞–ª—ñ–¥—É—î–º–æ user_id
        userid_valid_error = self._validate_user_id(user_id)
        if userid_valid_error:
            await message.answer(userid_valid_error, parse_mode=ParseMode.HTML)
            return

        # –≤–∞–ª—ñ–¥—É—î–º–æ teacher_name
        teacher_name_valid_error = self._validate_teacher_name(tn)
        if teacher_name_valid_error:
            await message.answer(teacher_name_valid_error, parse_mode=ParseMode.HTML)
            return

        # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        await state.update_data(
            user_id=int(user_id),
            teacher_name=tn
        )

        try:
            existing_teacher = await db.verification.get_name(int(user_id))

            if existing_teacher:
                prompt = (
                    "<b>‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>\n\n"
                    f"–ê–∫–∞—É–Ω—Ç –∑ <code>user_id = {user_id}</code> –≤–∂–µ —ñ—Å–Ω—É—î.\n"
                    f"–Ü–º'—è –≤—á–∏—Ç–µ–ª—è –±—É–¥–µ <b>–æ–Ω–æ–≤–ª–µ–Ω–æ</b> –∑ "
                    f"<code>{existing_teacher}</code> –Ω–∞ <code>{tn}</code>.\n\n"
                    "<i>–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?</i>"
                )
            else:
                prompt = (
                    "<b>üìã –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</b>\n\n"
                    f"<b>User ID:</b> <code>{user_id}</code>\n"
                    f"<b>–Ü–º'—è –≤—á–∏—Ç–µ–ª—è:</b> <code>{tn}</code>\n\n"
                    "<i>–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?</i>"
                )
        except Exception as e:
            await message.answer(
                "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö</b>\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode=ParseMode.HTML
            )
            self.log.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å devmode/access/add: {e}")
            await state.clear()
            return

        # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ—ñ–¥–±–µ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.answer(
            prompt,
            parse_mode=ParseMode.HTML,
            reply_markup=SubmitKeyboard().get_keyboard(
                submit_cb="add_access_submit",
                cancel_cb="add_access_cancel"
            )
        )

        # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∑–±–æ—Ä—É callback
        await state.set_state(DevAddAccess.waiting_for_confirmation)

    def _validate_user_id(self, user_id_str: str) -> str | None:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è user_id"""
        if not user_id_str:
            return "‚ö†Ô∏è <b>User ID –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º</b>"

        if not user_id_str.isdigit():
            return (
                "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π User ID</b>\n\n"
                "User ID –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏.\n"
                f"–í–∏ –≤–≤–µ–ª–∏: <code>{user_id_str}</code>"
            )

        user_id = int(user_id_str)

        if user_id < self.MIN_USER_ID:
            return f"‚ö†Ô∏è <b>User ID –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π</b>\n\n–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {self.MIN_USER_ID}"

        if user_id > self.MAX_USER_ID:
            return f"‚ö†Ô∏è <b>User ID –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π</b>\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {self.MAX_USER_ID}"

        return None

    def _validate_teacher_name(self, teacher_name: str) -> str | None:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ –≤—á–∏—Ç–µ–ª—è"""
        if not teacher_name:
            return "‚ö†Ô∏è <b>–Ü–º'—è –≤—á–∏—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º</b>"

        if len(teacher_name) < self.MIN_TEACHER_NAME_LENGTH:
            return (
                f"‚ö†Ô∏è <b>–Ü–º'—è –≤—á–∏—Ç–µ–ª—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ</b>\n\n"
                f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: {self.MIN_TEACHER_NAME_LENGTH} —Å–∏–º–≤–æ–ª–∏"
            )

        if len(teacher_name) > self.MAX_TEACHER_NAME_LENGTH:
            return (
                f"‚ö†Ô∏è <b>–Ü–º'—è –≤—á–∏—Ç–µ–ª—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ</b>\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: {self.MAX_TEACHER_NAME_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤"
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        if not re.match(r"^[–∞-—â–ê-–©–¨—å–Æ—é–Ø—è–Ü—ñ–á—ó–Ñ—î“ê“ëA-Za-z\s'\-]+$", teacher_name):
            return "‚ö†Ô∏è <b>–Ü–º'—è –≤—á–∏—Ç–µ–ª—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏, –∞–ø–æ—Å—Ç—Ä–æ—Ñ –∞–±–æ –¥–µ—Ñ—ñ—Å</b>"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ–±—ñ–ª–∏
        if teacher_name.isspace():
            return "‚ö†Ô∏è <b>–Ü–º'—è –≤—á–∏—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –∑ –ø—Ä–æ–±—ñ–ª—ñ–≤</b>"

        return None

    async def submit(self, callback: CallbackQuery, state: FSMContext, db: DBConnector) -> None:
        """–û–±—Ä–æ–±–∫–∞ callback –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è"""
        await callback.answer()

        try:
            data = await state.get_data()
            user_id = data.get("user_id")
            teacher_name = data.get("teacher_name")

            # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –¥–æ –ë–î
            await db.verification.add_verif_teacher(user_id, teacher_name)

            await callback.message.answer(
                "‚úÖ <b>–£—Å–ø—ñ—à–Ω–æ</b>\n\n"
                f"–î–æ—Å—Ç—É–ø –¥–ª—è <code>{teacher_name}</code> "
                f"(ID: <code>{user_id}</code>) –¥–æ–¥–∞–Ω–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏.",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            await callback.message.answer(
                "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ</b>\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode=ParseMode.HTML
            )
            self.log.error(f"Error devmode/access/add: {e}")
        finally:
            await state.clear()

    @staticmethod
    async def cancel(callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–∫–∞ callback —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        await callback.answer()
        await state.clear()

        await callback.message.answer(
            "üîÑ <b>–°–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∑–Ω–æ–≤—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n"
            "<code>user_id</code>\n"
            "<code>teacher_name</code>",
            parse_mode=ParseMode.HTML
        )

        # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        await state.set_state(DevAddAccess.waiting_for_data)
