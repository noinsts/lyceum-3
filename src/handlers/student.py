from aiogram import F
from aiogram.types import Message
from aiogram.enums import ParseMode
from pytz import timezone

from .base import BaseHandler
from src.settings.calls import Calls


class StudentHandler(BaseHandler):
    def __init__(self):
        super().__init__()
        self.WEEKEND_STICKER = "CAACAgEAAxkBAAEOZSxoE3COqmuPY034826sWOvB7WgTQgACjgEAAnY3dj9180psDptQBzYE"
        self.WEEKEND_PROMPT = "–í–∏—Ö—ñ–¥–Ω–∏–π! Have a rest"
        # '\' –¥–ª—è –µ–∫—Ä–∞–Ω—ñ–∑—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª—ñ–≤ MD_V2
        self.NO_CLASS = r"–°—å–æ–≥–æ–¥–Ω—ñ —Ö–º–∞—Ä–Ω–æ\.\.\. ‚òÅÔ∏è –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ 0\_0 ||–∞–±–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–Ω—å—Ç–µ —É—á–Ω–µ–º||"


    def register_handler(self) -> None:
        self.router.message.register(self.today, F.text == 'üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')
        self.router.message.register(self.tomorrow, F.text == 'üåá –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
        self.router.message.register(self.next_lesson, F.text == '‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫')
        self.router.message.register(self.calls, F.text == 'üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤')


    @staticmethod
    def _generate_schedule_message(day_name: str, results: list[tuple[str]], is_tomorrow: bool = False) -> str:
        day_type = "–∑–∞–≤—Ç—Ä–∞" if is_tomorrow else "—Å—å–æ–≥–æ–¥–Ω—ñ"

        prompt = f"–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ –Ω–∞ {day_type} <b>({day_name.capitalize()})</b>:\n\n"

        for i, subject in enumerate(results):
            prompt += f"<b>{i+1}</b>: {subject[0]}\n"

        return prompt


    async def today(self, message: Message) -> None:
        """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
        self.db.register.update_udata(message.from_user)  # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω—ñ–∫–Ω–µ–π–º

        user_class = self.db.register.get_class(message.from_user.id)

        if not user_class:
            await message.answer(self.NO_CLASS, parse_mode=ParseMode.MARKDOWN_V2)
            return

        # –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–Ω—è –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        day_num: int = message.date.astimezone(self.kyiv_tz).weekday()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –±—É–¥–Ω—ñ–π –¥–µ–Ω—å
        if day_num > 4:
            await message.answer(self.WEEKEND_PROMPT)
            await message.answer_sticker(self.WEEKEND_STICKER)
            return

        # –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å –≤ –±–¥
        day_name = self.cfg._config.get(str(day_num))

        results = self.db.student.get_today(day_name, self.db.register.get_class(message.from_user.id))
        prompt = self._generate_schedule_message(day_name, results)

        await message.answer(prompt, parse_mode=ParseMode.HTML)


    async def tomorrow(self, message: Message) -> None:
        """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ üåá –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        self.db.register.update_udata(message.from_user)  # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω—ñ–∫–Ω–µ–π–º

        user_class = self.db.register.get_class(message.from_user.id)

        if not user_class:
            await message.answer(self.NO_CLASS, parse_mode=ParseMode.MARKDOWN_V2)
            return

        # –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–Ω—è –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        day_num: int = message.date.astimezone(self.kyiv_tz).weekday()

        # –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≤—Ç—Ä–∞—à–Ω—å–æ–≥–æ –¥–Ω—è
        day_num: int = 0 if day_num == 6 else day_num + 1


        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –±—É–¥–Ω—ñ–π –¥–µ–Ω—å
        if day_num > 4:
            await message.answer(self.WEEKEND_PROMPT)
            await message.answer_sticker(self.WEEKEND_STICKER)
            return

        # –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–Ω—è –¥–ª—è –±–¥
        day_num: str = self.cfg._config.get(str(day_num))

        results = self.db.student.get_today(day_num, user_class)
        prompt = self._generate_schedule_message(day_num, results, is_tomorrow=True)

        await message.answer(prompt, parse_mode=ParseMode.HTML)


    async def next_lesson(self, message: Message) -> None:
        """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫"""
        self.db.register.update_udata(message.from_user)  # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω—ñ–∫–Ω–µ–π–º

        await message.answer("–ü–æ–∫–∏ —â–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ üåö")


    async def calls(self, message: Message) -> None:
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤"""
        self.db.register.update_udata(message.from_user)  # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω—ñ–∫–Ω–µ–π–º

        data = Calls().CALLS

        prompt = f"üîî <b>–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤</b>\n\n"

        for date, name in data.items():
            prompt += f"<b>{date}</b> ‚Äî {name}\n"

        await message.answer(prompt, parse_mode=ParseMode.HTML)
