from aiogram import F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from ..base import BaseHandler
from src.keyboards.inline import TeacherTypes
from src.utils.states import TeacherTypesStates


class Meeting(BaseHandler):
    def register_handler(self) -> None:
        self.router.callback_query.register(
            self.meeting,
            F.data == 'meeting'
        )

        self.router.callback_query.register(
            self.toggle_teacher,
            TeacherTypesStates.choosing_teacher,
            F.data.startswith("teacher_")
        )

        self.router.callback_query.register(
            self.finish_meeting,
            TeacherTypesStates.choosing_teacher,
            F.data == 'meeting_submit_button'
        )

    @staticmethod
    async def meeting(callback: CallbackQuery, state: FSMContext) -> None:
        await state.set_state(TeacherTypesStates.choosing_teacher)
        await state.update_data(selected_teacher_types=[])
        
        await callback.message.answer(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏—Ö, –∫–æ–≥–æ –∑–∞–ø—Ä–æ—à—É—î–º–æ –Ω–∞ –≤–µ—á—ñ—Ä–∫—É ‚ú®",
            reply_markup=TeacherTypes().get_keyboard()
        )

        # –∑–∞–≥–ª—É—à–∫–∞
        await callback.answer()

    @staticmethod
    async def toggle_teacher(callback: CallbackQuery, state: FSMContext) -> None:
        data = await state.get_data()
        selected = data.get("selected_teacher_types", [])
        teacher_type = callback.data

        # –ª–æ–≥—ñ–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—á–∏—Ç–µ–ª—è –∑—ñ —Å–ø–∏—Å–∫—É, –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ
        if teacher_type in selected:
            selected.remove(teacher_type)
            await callback.answer("–í–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            selected.append(teacher_type)
            await callback.answer("–î–æ–¥–∞–Ω–æ!")

        await state.update_data(selected_teacher_type=selected)

    @staticmethod
    async def finish_meeting(callback: CallbackQuery, state: FSMContext) -> None:
        data = await state.get_data()
        selected = data.get("selected_teacher_types", [])

        if not selected:
            await callback.answer("–ù—ñ—á–æ–≥–æ –ø–æ–∫–∏ –Ω–µ –æ–±—Ä–∞–Ω–æ", show_alert=True)
            return

        # TODO: –∑—Ä–æ–±–∏—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ –Ω–∞–∑–≤–∏ –≤ text
        text = "üöÄ <b>–í–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞ –Ω–∞—Ä–∞–¥—É</b>:\n" + "\n".join(f"‚Ä¢ {t}" for t in selected)

        await callback.message.answer(text, parse_mode=ParseMode.HTML)
        await state.clear()
        await callback.answer("–ì–æ—Ç–æ–≤–æ!")

        # TODO: –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        # –¥–ª—è —Ü—å–æ–≥–æ —î inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ SubmitKeyboard
