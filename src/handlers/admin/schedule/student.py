# TODO: –∑—Ä–æ–±–∏—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –≤–∏–Ω–µ—Å—Ç–∏ –¥–µ—è–∫—É –ª–æ–≥—ñ–∫—É

from typing import Set, List, Tuple

from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from ...base import BaseHandler
from src.keyboards.inline import SubmitKeyboard, SelectForm
from src.utils import classes
from src.states.admin import StudentSchedule
from src.db.connector import DBConnector
from src.service import broadcast
from src.filters.callbacks import FormsListCallback

HANDLER_TRIGGER = "change_schedule_student"
FINISH_TRIGGER = "selected_forms_done"
SELECTED_FORMS_TRIGGER = "selected_forms_list"
SUBMIT_TRIGGER = "submit_send_student_schedule_broadcast"
CANCEL_TRIGGER = "cancel_send_student_schedule_broadcast"


class StudentsChangeSchedule(BaseHandler):
    def register_handler(self) -> None:
        self.router.callback_query.register(
            self.handler,
            F.data == HANDLER_TRIGGER
        )

        self.router.callback_query.register(
            self.final,
            F.data == FINISH_TRIGGER,
            StudentSchedule.waiting_for_forms
        )

        self.router.callback_query.register(
            self.selected_forms,
            F.data == SELECTED_FORMS_TRIGGER,
            StudentSchedule.waiting_for_forms
        )

        self.router.callback_query.register(
            self.input_form,
            FormsListCallback.filter(),
            StudentSchedule.waiting_for_forms
        )

        self.router.callback_query.register(
            self.confirm,
            F.data == SUBMIT_TRIGGER,
            StudentSchedule.waiting_for_confirmation
        )

        self.router.callback_query.register(
            self.cancel,
            F.data == CANCEL_TRIGGER,
            StudentSchedule.waiting_for_confirmation
        )

    @staticmethod
    async def handler(callback: CallbackQuery, state: FSMContext) -> None:
        forms = classes.CLASSES

        await callback.message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å–∏ –∑—ñ —Å–ø–∏—Å–∫—É",
            reply_markup=SelectForm().get_keyboard(forms)
        )

        await state.set_state(StudentSchedule.waiting_for_forms)

        dataset = set()
        await state.update_data(dataset=list(dataset))
        await state.update_data(forms=forms)

        # –∑–∞–≥–ª—É—à–∫–∞
        await callback.answer()

    async def input_form(self, callback: CallbackQuery, callback_data: FormsListCallback, state: FSMContext) -> None:
        data = await state.get_data()

        forms = data.get("forms")
        dataset = set(data.get("dataset", []))

        valid, response, updated_dataset = self._validate_forms(callback_data.form, dataset, forms)

        if valid:
            await state.update_data(dataset=list(updated_dataset))

        await callback.answer(response)

    # TODO: –≤–∏–Ω–µ—Å—Ç–∏ –≤ validators

    @staticmethod
    def _validate_forms(raw: str, dataset: Set[str], forms: List[str]) -> Tuple[bool, str, Set[str]]:
        """
        –ú–µ—Ç–æ–¥ –≤–∞–ª—ñ–¥—É—î –≤–≤–µ–¥–µ–Ω–∏–π –∫–ª–∞—Å —Ç–∞ –æ–Ω–æ–≤–ª—é—î –º–Ω–æ–∂–∏–Ω—É –æ–±—Ä–∞–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤.

        Args:
            raw (str): –í–≤–µ–¥–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∫–ª–∞—Å.
            dataset (Set[str]): –ù–∞–±—ñ—Ä —É–∂–µ –æ–±—Ä–∞–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤.
            forms (List[str]): –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—ñ–≤.

        Returns:
            Tuple:
                bool: –ß–∏ –≤–∞–ª—ñ–¥–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è.
                str: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
                Set[str]: –û–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞–±—ñ—Ä –æ–±—Ä–∞–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤.
        """
        if raw not in forms:
            return False, "‚ùå –¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—É –Ω–µ —ñ—Å–Ω—É—î", dataset

        if raw in dataset:
            dataset.remove(raw)
            return True, f"–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ {raw} –∑ —Å–ø–∏—Å–∫—É –∫–ª–∞—Å—ñ–≤.", dataset

        dataset.add(raw)
        return True, f"–í–∏ –¥–æ–¥–∞–ª–∏ {raw} –¥–æ —Å–ø–∏—Å–∫—É –∫–ª–∞—Å—ñ–≤", dataset

    async def selected_forms(self, callback: CallbackQuery, state: FSMContext) -> None:
        data = await state.get_data()
        forms = set(data.get("dataset", []))

        if not forms:
            await callback.answer(
                "–í–∏ –ø–æ–∫–∏ —â–æ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—É, –∞–ª–µ —â–µ –Ω–µ –ø—ñ–∑–Ω–æ —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç—å..."
            )
            return

        prompt = "<b>–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤</b>\n\n"
        prompt += self._forms_prompt(forms)

        await callback.message.edit_text(prompt, parse_mode=ParseMode.HTML)
        await callback.answer()

    async def final(self, callback: CallbackQuery, state: FSMContext) -> None:
        data = await state.get_data()
        dataset = set(data.get("dataset", []))

        if len(dataset) < 1:
            await callback.answer(
                "‚ùå –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—É. "
                "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /cancel"
            )
            return

        prompt = "<b>–í–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Ä–æ–∑–∫–ª–∞–¥—É —Ç–∞–∫–∏–º –∫–ª–∞—Å–∞–º:</b>\n\n"
        prompt += self._forms_prompt(dataset)
        prompt += "\n<i>–æ–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é</i>"

        await state.set_state(StudentSchedule.waiting_for_confirmation)

        await callback.message.edit_text(
            prompt,
            reply_markup=SubmitKeyboard().get_keyboard(SUBMIT_TRIGGER, CANCEL_TRIGGER),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()

    @staticmethod
    async def confirm(callback: CallbackQuery, state: FSMContext, db: DBConnector) -> None:
        await callback.answer()

        data = await state.get_data()
        dataset = set(data.get("dataset"))

        prompt = (
            "üì¢ <b>–£–≤–∞–≥–∞! –ó–º—ñ–Ω–∏ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ</b>\n\n"
            "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥."
        )

        total_sent, total_failed = 0, 0

        for form in dataset:
            student_ids = await db.register.get_by_form(form)
            sent, failed = await broadcast(prompt, student_ids)

            total_sent += sent
            total_failed += failed

        await callback.message.edit_text(
            f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!\n\n"
            f"üì® –£—Å–ø—ñ—à–Ω–æ: <b>{total_sent}</b>\n"
            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è: <b>{total_failed}</b>",
            parse_mode=ParseMode.HTML
        )

    @staticmethod
    async def cancel(callback: CallbackQuery, state: FSMContext) -> None:
        await callback.answer()

        await state.update_data(dataset=[])
        await state.set_state(StudentSchedule.waiting_for_forms)

        await callback.message.edit_text(
            "–ù—É —ñ –ª–∞–¥–Ω–æ, –≤–≤–µ–¥—ñ—Ç—å –∫–ª–∞—Å–∏, —è–∫—ñ —Ö–æ—á–µ—Ç–µ —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏",
            reply_markup=SelectForm().get_keyboard(classes.CLASSES)
        )

    @staticmethod
    def _forms_prompt(forms: Set[str]) -> str:
        return "".join(f"üîπ {form}\n" for form in forms)
