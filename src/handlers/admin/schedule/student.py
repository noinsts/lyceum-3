# TODO: –∑—Ä–æ–±–∏—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –≤–∏–Ω–µ—Å—Ç–∏ –¥–µ—è–∫—É –ª–æ–≥—ñ–∫—É

from typing import Set, List, Tuple

from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from ...base import BaseHandler
from src.keyboards.reply import GetClassWithDone
from src.keyboards.inline import SubmitKeyboard
from src.utils import classes
from src.states.admin import StudentSchedule
from src.db.connector import DBConnector
from src.bot_instance import get_bot

FINISH_TRIGGER = "‚úÖ –ì–æ—Ç–æ–≤–æ"
SELECTED_FORMS_TRIGGER = "‚ÑπÔ∏è –û–±—Ä–∞–Ω—ñ –∫–ª–∞—Å–∏"


class StudentsChangeSchedule(BaseHandler):
    def register_handler(self) -> None:
        self.router.callback_query.register(
            self.handler,
            F.data == 'change_schedule_student'
        )

        self.router.message.register(
            self.final,
            StudentSchedule.waiting_for_forms,
            F.text == FINISH_TRIGGER
        )

        self.router.message.register(
            self.selected_forms,
            StudentSchedule.waiting_for_forms,
            F.text == SELECTED_FORMS_TRIGGER
        )

        self.router.message.register(
            self.input_form,
            StudentSchedule.waiting_for_forms
        )

        self.router.callback_query.register(
            self.confirm,
            StudentSchedule.waiting_for_confirmation,
            F.data == 'submit_send_student_schedule_broadcast'
        )

        self.router.callback_query.register(
            self.cancel,
            StudentSchedule.waiting_for_confirmation,
            F.data == 'cancel_send_student_schedule_broadcast'
        )

    @staticmethod
    async def handler(callback: CallbackQuery, state: FSMContext) -> None:
        markup = GetClassWithDone().get_keyboard(classes.CLASSES)

        await callback.message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å–∏ –∑—ñ —Å–ø–∏—Å–∫—É",
            reply_markup=markup
        )

        await state.set_state(StudentSchedule.waiting_for_forms)

        forms = [button.text for row in markup.keyboard for button in row]
        await state.update_data(forms=forms)

        dataset = set()
        await state.update_data(dataset=list(dataset))

        # –∑–∞–≥–ª—É—à–∫–∞
        await callback.answer()

    async def input_form(self, message: Message, state: FSMContext) -> None:
        data = await state.get_data()

        forms = data.get("forms")
        dataset = set(data.get("dataset", []))

        valid, response, updated_dataset = self._validate_forms(message.text, dataset, forms)

        if valid:
            await state.update_data(dataset=list(updated_dataset))

        await message.answer(
            response,
            parse_mode=ParseMode.HTML
        )

    @staticmethod
    def _validate_forms(raw: str, dataset: Set[str], forms: List[str]) -> Tuple[bool, str, Set[str]]:
        """
        –ú–µ—Ç–æ–¥ –≤–∞–ª—ñ–¥—É—î –≤–≤–µ–¥–µ–Ω–∏–π –∫–ª–∞—Å —Ç–∞ –æ–Ω–æ–≤–ª—é—î –º–Ω–æ–∂–∏–Ω—É –æ–±—Ä–∞–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤.

        Args:
            raw (str): –í–≤–µ–¥–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∫–ª–∞—Å.
            dataset (Set[str]): –ù–∞–±—ñ—Ä —É–∂–µ –æ–±—Ä–∞–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤.
            forms (List[str]): –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—ñ–≤.

        Returns:
            Tuple:
                bool: –ß–∏ –≤–∞–ª—ñ–¥–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è.
                str: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
                Set[str]: –û–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞–±—ñ—Ä –æ–±—Ä–∞–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤.
        """
        if raw in forms:
            return False, "‚ùå –¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—É –Ω–µ —ñ—Å–Ω—É—î", dataset

        if raw not in dataset:
            dataset.remove(raw)
            return True, f"–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ <b>{raw}</b> –∑ —Å–ø–∏—Å–∫—É –∫–ª–∞—Å—ñ–≤.", dataset

        dataset.add(raw)
        return True, f"–í–∏ –¥–æ–¥–∞–ª–∏ <b>{raw}</b> –¥–æ —Å–ø–∏—Å–∫—É –∫–ª–∞—Å—ñ–≤", dataset

    async def selected_forms(self, message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        forms = set(data.get("dataset", []))

        if not forms:
            await message.answer(
                "–í–∏ –ø–æ–∫–∏ —â–æ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—É, –∞–ª–µ —â–µ –Ω–µ –ø—ñ–∑–Ω–æ —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç—å..."
            )
            return

        prompt = "<b>–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤</b>\n\n"
        prompt += self._forms_prompt(forms)

        await message.answer(prompt, parse_mode=ParseMode.HTML)

    async def final(self, message: Message, state: FSMContext) -> None:
        await state.set_state(StudentSchedule.waiting_for_confirmation)

        data = await state.get_data()
        dataset = set(data.get("dataset", []))

        if len(dataset) < 1:
            await message.answer(
                "‚ùå –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—É. "
                "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /cancel"
            )
            return

        prompt = "<b>–í–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Ä–æ–∑–∫–ª–∞–¥—É —Ç–∞–∫–∏–º –∫–ª–∞—Å–∞–º:</b>\n\n"
        prompt += self._forms_prompt(dataset)
        prompt += "\n<i>–æ–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é</i>"

        await message.answer(
            prompt,
            reply_markup=SubmitKeyboard().get_keyboard(
                "submit_send_student_schedule_broadcast",
                "cancel_send_student_schedule_broadcast"
            ),
            parse_mode=ParseMode.HTML
        )

    async def confirm(self, callback: CallbackQuery, state: FSMContext, db: DBConnector) -> None:
        await callback.answer()

        data = await state.get_data()
        dataset = set(data.get("dataset"))

        prompt = (
            "üì¢ <b>–£–≤–∞–≥–∞! –ó–º—ñ–Ω–∏ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ</b>\n\n"
            "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥."
        )

        count, failed = 0, 0

        for form in dataset:
            student_ids = await db.register.get_by_form(form)
            cc, ff = await self._broadcast_message(prompt, student_ids)

            count += cc
            failed += ff

        await callback.message.answer(
            f"–ß—É–¥–æ–≤–æ! –í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ {count}/{failed} —É—á–Ω—è–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —É—Ä–æ–∫—ñ–≤"
        )

    @staticmethod
    async def _broadcast_message(prompt: str, student_ids: List) -> Tuple:
        """
        –ú–µ—Ç–æ–¥ –æ–±—Ä–æ–±–ª—é—î –≤—ñ–¥–ø—Ä–∞–≤–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.

        Args:
            prompt (str): –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
            student_ids (List[int]): —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –∫–æ—Ç—Ä–∏–º —Ç—Ä–µ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

        Returns:
            Tuple:
                int: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                int: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –Ω–µ –∑–º–æ–≥–ª–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        bot = get_bot()

        count, failed = 0, 0

        for student_in in student_ids:
            try:
                await bot.send_message(
                    student_in,
                    prompt,
                    parse_mode=ParseMode.HTML
                )
                count += 1
            except (TelegramBadRequest, TelegramForbiddenError):
                failed += 1
                continue

        return count, failed

    @staticmethod
    async def cancel(callback: CallbackQuery, state: FSMContext) -> None:
        await callback.answer()

        await state.update_data(dataset=[])
        await state.set_state(StudentSchedule.waiting_for_forms)

        await callback.message.answer(
            "–ù—É —ñ –ª–∞–¥–Ω–æ, –≤–≤–µ–¥—ñ—Ç—å –∫–ª–∞—Å–∏, —è–∫—ñ —Ö–æ—á–µ—Ç–µ —Å–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏",
            reply_markup=GetClassWithDone().get_keyboard(classes.CLASSES)
        )

    @staticmethod
    def _forms_prompt(forms: Set[str]) -> str:
        return "".join(f"üîπ {form}\n" for form in forms)
